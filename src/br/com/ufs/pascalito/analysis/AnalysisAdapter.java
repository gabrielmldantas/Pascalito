/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.analysis;

import java.util.*;
import br.com.ufs.pascalito.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoLabels(ADeclaracaoLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnicoLabels(AUnicoLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiploLabels(AMultiploLabels node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoTipos(ADeclaracaoTipos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyDeclaracaoTipos(AEmptyDeclaracaoTipos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnicoDefinicaoTipos(AUnicoDefinicaoTipos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiploDefinicaoTipos(AMultiploDefinicaoTipos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExistenteDenotadorTipo(AExistenteDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANovoDenotadorTipo(ANovoDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerDenotadorTipo(AIntegerDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringDenotadorTipo(AStringDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealDenotadorTipo(ARealDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanDenotadorTipo(ABooleanDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrdinalNovoTipo(AOrdinalNovoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayNovoTipo(AArrayNovoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoArray(ATipoArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnicoTiposOrdinais(AUnicoTiposOrdinais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiploTiposOrdinais(AMultiploTiposOrdinais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANovoTipoOrdinal(ANovoTipoOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExistenteTipoOrdinal(AExistenteTipoOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumeradoNovoTipoOrdinal(AEnumeradoNovoTipoOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrangeNovoTipoOrdinal(ASubrangeNovoTipoOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoEnumerado(ATipoEnumerado node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoSubrange(ATipoSubrange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInteiroConstante(AInteiroConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringConstante(AStringConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArray(TArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLabel(TLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedure(TProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstBooleana(TConstBooleana node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoEVirgula(TPontoEVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoPonto(TPontoPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreParenteses(TAbreParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaParenteses(TFechaParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreColchete(TAbreColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaColchete(TFechaColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstInteiro(TConstInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstReal(TConstReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstString(TConstString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperadorRelacional(TOperadorRelacional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperadorLogico(TOperadorLogico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperadorAritmetico(TOperadorAritmetico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentLinha(TComentLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBloco(TComentBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBlocoFim(TComentBlocoFim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBlocoCorpo(TComentBlocoCorpo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAsterico(TAsterico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarra(TBarra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
