/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.analysis;

import java.util.*;
import br.com.ufs.pascalito.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAString(AString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInteiroConstante(AInteiroConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringConstante(AStringConstante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeroSemSinal(ANumeroSemSinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefinicaoTipo(ADefinicaoTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimitivoDenotadorTipo(APrimitivoDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdOuOrdinalDenotadorTipo(AIdOuOrdinalDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDenotadorTipo(AArrayDenotadorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerTipoPrimitivo(AIntegerTipoPrimitivo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTipoPrimitivo(AStringTipoPrimitivo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanTipoPrimitivo(ABooleanTipoPrimitivo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdTipoIdOuOrdinal(AIdTipoIdOuOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnumeradoTipoIdOuOrdinal(AEnumeradoTipoIdOuOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubrangeTipoIdOuOrdinal(ASubrangeTipoIdOuOrdinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoIdentificador(ATipoIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoEnumerado(ATipoEnumerado node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoSubrange(ATipoSubrange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoArray(ATipoArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArray(TArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLabel(TLabel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedure(TProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstBooleana(TConstBooleana node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoEVirgula(TPontoEVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoPonto(TPontoPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreParenteses(TAbreParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaParenteses(TFechaParenteses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreColchete(TAbreColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaColchete(TFechaColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstInteiro(TConstInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorIgual(TMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinal(TSinal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplicacao(TMultiplicacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivisao(TDivisao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentLinha(TComentLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBloco(TComentBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBlocoFim(TComentBlocoFim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentBlocoCorpo(TComentBlocoCorpo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAsterico(TAsterico node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarra(TBarra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstString(TConstString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstStringCorpo(TConstStringCorpo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspaSimples(TAspaSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewline(TNewline node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
