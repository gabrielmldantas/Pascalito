/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.analysis;

import java.util.*;
import br.com.ufs.pascalito.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getCabecalhoPrograma() != null)
        {
            node.getCabecalhoPrograma().apply(this);
        }
        outAProgram(node);
    }

    public void inAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        defaultIn(node);
    }

    public void outAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        inAUnicoCabecalhoPrograma(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAUnicoCabecalhoPrograma(node);
    }

    public void inAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        defaultIn(node);
    }

    public void outAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        inAMultiploCabecalhoPrograma(node);
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAMultiploCabecalhoPrograma(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getSentencaComposta() != null)
        {
            node.getSentencaComposta().apply(this);
        }
        if(node.getDeclaracoesProcFuncoes() != null)
        {
            node.getDeclaracoesProcFuncoes().apply(this);
        }
        if(node.getDeclaracoesVariaveis() != null)
        {
            node.getDeclaracoesVariaveis().apply(this);
        }
        if(node.getDeclaracaoTipos() != null)
        {
            node.getDeclaracaoTipos().apply(this);
        }
        if(node.getDeclaracaoLabels() != null)
        {
            node.getDeclaracaoLabels().apply(this);
        }
        outABloco(node);
    }

    public void inAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        defaultIn(node);
    }

    public void outAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        inAUnicoIdentificadores(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAUnicoIdentificadores(node);
    }

    public void inAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        defaultIn(node);
    }

    public void outAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        inAMultiploIdentificadores(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        outAMultiploIdentificadores(node);
    }

    public void inAIntegerIdentificadorTipoOrdinal(AIntegerIdentificadorTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outAIntegerIdentificadorTipoOrdinal(AIntegerIdentificadorTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerIdentificadorTipoOrdinal(AIntegerIdentificadorTipoOrdinal node)
    {
        inAIntegerIdentificadorTipoOrdinal(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerIdentificadorTipoOrdinal(node);
    }

    public void inAStringIdentificadorTipoOrdinal(AStringIdentificadorTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outAStringIdentificadorTipoOrdinal(AStringIdentificadorTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringIdentificadorTipoOrdinal(AStringIdentificadorTipoOrdinal node)
    {
        inAStringIdentificadorTipoOrdinal(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringIdentificadorTipoOrdinal(node);
    }

    public void inARealIdentificadorTipoOrdinal(ARealIdentificadorTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outARealIdentificadorTipoOrdinal(ARealIdentificadorTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealIdentificadorTipoOrdinal(ARealIdentificadorTipoOrdinal node)
    {
        inARealIdentificadorTipoOrdinal(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealIdentificadorTipoOrdinal(node);
    }

    public void inABooleanIdentificadorTipoOrdinal(ABooleanIdentificadorTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outABooleanIdentificadorTipoOrdinal(ABooleanIdentificadorTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanIdentificadorTipoOrdinal(ABooleanIdentificadorTipoOrdinal node)
    {
        inABooleanIdentificadorTipoOrdinal(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanIdentificadorTipoOrdinal(node);
    }

    public void inAIdentificadorIdentificadorTipo(AIdentificadorIdentificadorTipo node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorIdentificadorTipo(AIdentificadorIdentificadorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorIdentificadorTipo(AIdentificadorIdentificadorTipo node)
    {
        inAIdentificadorIdentificadorTipo(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorIdentificadorTipo(node);
    }

    public void inAOrdinalIdentificadorTipo(AOrdinalIdentificadorTipo node)
    {
        defaultIn(node);
    }

    public void outAOrdinalIdentificadorTipo(AOrdinalIdentificadorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrdinalIdentificadorTipo(AOrdinalIdentificadorTipo node)
    {
        inAOrdinalIdentificadorTipo(node);
        if(node.getIdentificadorTipoOrdinal() != null)
        {
            node.getIdentificadorTipoOrdinal().apply(this);
        }
        outAOrdinalIdentificadorTipo(node);
    }

    public void inADeclaracaoLabels(ADeclaracaoLabels node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoLabels(ADeclaracaoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoLabels(ADeclaracaoLabels node)
    {
        inADeclaracaoLabels(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getLabels() != null)
        {
            node.getLabels().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outADeclaracaoLabels(node);
    }

    public void inAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        inAEmptyDeclaracaoLabels(node);
        outAEmptyDeclaracaoLabels(node);
    }

    public void inAUnicoLabels(AUnicoLabels node)
    {
        defaultIn(node);
    }

    public void outAUnicoLabels(AUnicoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoLabels(AUnicoLabels node)
    {
        inAUnicoLabels(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAUnicoLabels(node);
    }

    public void inAMultiploLabels(AMultiploLabels node)
    {
        defaultIn(node);
    }

    public void outAMultiploLabels(AMultiploLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploLabels(AMultiploLabels node)
    {
        inAMultiploLabels(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getLabels() != null)
        {
            node.getLabels().apply(this);
        }
        outAMultiploLabels(node);
    }

    public void inALabel(ALabel node)
    {
        defaultIn(node);
    }

    public void outALabel(ALabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        inALabel(node);
        if(node.getConstInteiro() != null)
        {
            node.getConstInteiro().apply(this);
        }
        outALabel(node);
    }

    public void inADeclaracaoTipos(ADeclaracaoTipos node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoTipos(ADeclaracaoTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoTipos(ADeclaracaoTipos node)
    {
        inADeclaracaoTipos(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDefinicaoTipos() != null)
        {
            node.getDefinicaoTipos().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADeclaracaoTipos(node);
    }

    public void inAEmptyDeclaracaoTipos(AEmptyDeclaracaoTipos node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracaoTipos(AEmptyDeclaracaoTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracaoTipos(AEmptyDeclaracaoTipos node)
    {
        inAEmptyDeclaracaoTipos(node);
        outAEmptyDeclaracaoTipos(node);
    }

    public void inAUnicoDefinicaoTipos(AUnicoDefinicaoTipos node)
    {
        defaultIn(node);
    }

    public void outAUnicoDefinicaoTipos(AUnicoDefinicaoTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoDefinicaoTipos(AUnicoDefinicaoTipos node)
    {
        inAUnicoDefinicaoTipos(node);
        if(node.getDenotadorTipo() != null)
        {
            node.getDenotadorTipo().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAUnicoDefinicaoTipos(node);
    }

    public void inAMultiploDefinicaoTipos(AMultiploDefinicaoTipos node)
    {
        defaultIn(node);
    }

    public void outAMultiploDefinicaoTipos(AMultiploDefinicaoTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploDefinicaoTipos(AMultiploDefinicaoTipos node)
    {
        inAMultiploDefinicaoTipos(node);
        if(node.getDenotadorTipo() != null)
        {
            node.getDenotadorTipo().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getDefinicaoTipos() != null)
        {
            node.getDefinicaoTipos().apply(this);
        }
        outAMultiploDefinicaoTipos(node);
    }

    public void inAExistenteDenotadorTipo(AExistenteDenotadorTipo node)
    {
        defaultIn(node);
    }

    public void outAExistenteDenotadorTipo(AExistenteDenotadorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistenteDenotadorTipo(AExistenteDenotadorTipo node)
    {
        inAExistenteDenotadorTipo(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExistenteDenotadorTipo(node);
    }

    public void inANovoDenotadorTipo(ANovoDenotadorTipo node)
    {
        defaultIn(node);
    }

    public void outANovoDenotadorTipo(ANovoDenotadorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANovoDenotadorTipo(ANovoDenotadorTipo node)
    {
        inANovoDenotadorTipo(node);
        if(node.getNovoTipo() != null)
        {
            node.getNovoTipo().apply(this);
        }
        outANovoDenotadorTipo(node);
    }

    public void inAOrdinalDenotadorTipo(AOrdinalDenotadorTipo node)
    {
        defaultIn(node);
    }

    public void outAOrdinalDenotadorTipo(AOrdinalDenotadorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrdinalDenotadorTipo(AOrdinalDenotadorTipo node)
    {
        inAOrdinalDenotadorTipo(node);
        if(node.getIdentificadorTipoOrdinal() != null)
        {
            node.getIdentificadorTipoOrdinal().apply(this);
        }
        outAOrdinalDenotadorTipo(node);
    }

    public void inAOrdinalNovoTipo(AOrdinalNovoTipo node)
    {
        defaultIn(node);
    }

    public void outAOrdinalNovoTipo(AOrdinalNovoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrdinalNovoTipo(AOrdinalNovoTipo node)
    {
        inAOrdinalNovoTipo(node);
        if(node.getNovoTipoOrdinal() != null)
        {
            node.getNovoTipoOrdinal().apply(this);
        }
        outAOrdinalNovoTipo(node);
    }

    public void inAArrayNovoTipo(AArrayNovoTipo node)
    {
        defaultIn(node);
    }

    public void outAArrayNovoTipo(AArrayNovoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayNovoTipo(AArrayNovoTipo node)
    {
        inAArrayNovoTipo(node);
        if(node.getTipoArray() != null)
        {
            node.getTipoArray().apply(this);
        }
        outAArrayNovoTipo(node);
    }

    public void inATipoArray(ATipoArray node)
    {
        defaultIn(node);
    }

    public void outATipoArray(ATipoArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoArray(ATipoArray node)
    {
        inATipoArray(node);
        if(node.getDenotadorTipo() != null)
        {
            node.getDenotadorTipo().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getTiposOrdinais() != null)
        {
            node.getTiposOrdinais().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outATipoArray(node);
    }

    public void inAUnicoTiposOrdinais(AUnicoTiposOrdinais node)
    {
        defaultIn(node);
    }

    public void outAUnicoTiposOrdinais(AUnicoTiposOrdinais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoTiposOrdinais(AUnicoTiposOrdinais node)
    {
        inAUnicoTiposOrdinais(node);
        if(node.getTipoOrdinal() != null)
        {
            node.getTipoOrdinal().apply(this);
        }
        outAUnicoTiposOrdinais(node);
    }

    public void inAMultiploTiposOrdinais(AMultiploTiposOrdinais node)
    {
        defaultIn(node);
    }

    public void outAMultiploTiposOrdinais(AMultiploTiposOrdinais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploTiposOrdinais(AMultiploTiposOrdinais node)
    {
        inAMultiploTiposOrdinais(node);
        if(node.getTipoOrdinal() != null)
        {
            node.getTipoOrdinal().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getTiposOrdinais() != null)
        {
            node.getTiposOrdinais().apply(this);
        }
        outAMultiploTiposOrdinais(node);
    }

    public void inANovoTipoOrdinal(ANovoTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outANovoTipoOrdinal(ANovoTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANovoTipoOrdinal(ANovoTipoOrdinal node)
    {
        inANovoTipoOrdinal(node);
        if(node.getNovoTipoOrdinal() != null)
        {
            node.getNovoTipoOrdinal().apply(this);
        }
        outANovoTipoOrdinal(node);
    }

    public void inAExistenteTipoOrdinal(AExistenteTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outAExistenteTipoOrdinal(AExistenteTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistenteTipoOrdinal(AExistenteTipoOrdinal node)
    {
        inAExistenteTipoOrdinal(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExistenteTipoOrdinal(node);
    }

    public void inAEnumeradoNovoTipoOrdinal(AEnumeradoNovoTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outAEnumeradoNovoTipoOrdinal(AEnumeradoNovoTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumeradoNovoTipoOrdinal(AEnumeradoNovoTipoOrdinal node)
    {
        inAEnumeradoNovoTipoOrdinal(node);
        if(node.getTipoEnumerado() != null)
        {
            node.getTipoEnumerado().apply(this);
        }
        outAEnumeradoNovoTipoOrdinal(node);
    }

    public void inASubrangeNovoTipoOrdinal(ASubrangeNovoTipoOrdinal node)
    {
        defaultIn(node);
    }

    public void outASubrangeNovoTipoOrdinal(ASubrangeNovoTipoOrdinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubrangeNovoTipoOrdinal(ASubrangeNovoTipoOrdinal node)
    {
        inASubrangeNovoTipoOrdinal(node);
        if(node.getTipoSubrange() != null)
        {
            node.getTipoSubrange().apply(this);
        }
        outASubrangeNovoTipoOrdinal(node);
    }

    public void inATipoEnumerado(ATipoEnumerado node)
    {
        defaultIn(node);
    }

    public void outATipoEnumerado(ATipoEnumerado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoEnumerado(ATipoEnumerado node)
    {
        inATipoEnumerado(node);
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        outATipoEnumerado(node);
    }

    public void inATipoSubrange(ATipoSubrange node)
    {
        defaultIn(node);
    }

    public void outATipoSubrange(ATipoSubrange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoSubrange(ATipoSubrange node)
    {
        inATipoSubrange(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPontoPonto() != null)
        {
            node.getPontoPonto().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outATipoSubrange(node);
    }

    public void inAInteiroConstante(AInteiroConstante node)
    {
        defaultIn(node);
    }

    public void outAInteiroConstante(AInteiroConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroConstante(AInteiroConstante node)
    {
        inAInteiroConstante(node);
        if(node.getConstInteiro() != null)
        {
            node.getConstInteiro().apply(this);
        }
        outAInteiroConstante(node);
    }

    public void inAStringConstante(AStringConstante node)
    {
        defaultIn(node);
    }

    public void outAStringConstante(AStringConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringConstante(AStringConstante node)
    {
        inAStringConstante(node);
        if(node.getConstString() != null)
        {
            node.getConstString().apply(this);
        }
        outAStringConstante(node);
    }

    public void inADeclaracoesVariaveis(ADeclaracoesVariaveis node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesVariaveis(ADeclaracoesVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesVariaveis(ADeclaracoesVariaveis node)
    {
        inADeclaracoesVariaveis(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDeclaracaoVariaveis() != null)
        {
            node.getDeclaracaoVariaveis().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADeclaracoesVariaveis(node);
    }

    public void inAEmptyDeclaracoesVariaveis(AEmptyDeclaracoesVariaveis node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracoesVariaveis(AEmptyDeclaracoesVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracoesVariaveis(AEmptyDeclaracoesVariaveis node)
    {
        inAEmptyDeclaracoesVariaveis(node);
        outAEmptyDeclaracoesVariaveis(node);
    }

    public void inAUnicoDeclaracaoVariaveis(AUnicoDeclaracaoVariaveis node)
    {
        defaultIn(node);
    }

    public void outAUnicoDeclaracaoVariaveis(AUnicoDeclaracaoVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoDeclaracaoVariaveis(AUnicoDeclaracaoVariaveis node)
    {
        inAUnicoDeclaracaoVariaveis(node);
        if(node.getDeclaracaoVariavel() != null)
        {
            node.getDeclaracaoVariavel().apply(this);
        }
        outAUnicoDeclaracaoVariaveis(node);
    }

    public void inAMultiploDeclaracaoVariaveis(AMultiploDeclaracaoVariaveis node)
    {
        defaultIn(node);
    }

    public void outAMultiploDeclaracaoVariaveis(AMultiploDeclaracaoVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploDeclaracaoVariaveis(AMultiploDeclaracaoVariaveis node)
    {
        inAMultiploDeclaracaoVariaveis(node);
        if(node.getDeclaracaoVariavel() != null)
        {
            node.getDeclaracaoVariavel().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDeclaracaoVariaveis() != null)
        {
            node.getDeclaracaoVariaveis().apply(this);
        }
        outAMultiploDeclaracaoVariaveis(node);
    }

    public void inADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        inADeclaracaoVariavel(node);
        if(node.getDenotadorTipo() != null)
        {
            node.getDenotadorTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        outADeclaracaoVariavel(node);
    }

    public void inADeclaracoesProcFuncoes(ADeclaracoesProcFuncoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesProcFuncoes(ADeclaracoesProcFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesProcFuncoes(ADeclaracoesProcFuncoes node)
    {
        inADeclaracoesProcFuncoes(node);
        if(node.getDeclaracaoProcFuncoes() != null)
        {
            node.getDeclaracaoProcFuncoes().apply(this);
        }
        outADeclaracoesProcFuncoes(node);
    }

    public void inAEmptyDeclaracoesProcFuncoes(AEmptyDeclaracoesProcFuncoes node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracoesProcFuncoes(AEmptyDeclaracoesProcFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracoesProcFuncoes(AEmptyDeclaracoesProcFuncoes node)
    {
        inAEmptyDeclaracoesProcFuncoes(node);
        outAEmptyDeclaracoesProcFuncoes(node);
    }

    public void inAUnicoDeclaracaoProcFuncoes(AUnicoDeclaracaoProcFuncoes node)
    {
        defaultIn(node);
    }

    public void outAUnicoDeclaracaoProcFuncoes(AUnicoDeclaracaoProcFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoDeclaracaoProcFuncoes(AUnicoDeclaracaoProcFuncoes node)
    {
        inAUnicoDeclaracaoProcFuncoes(node);
        if(node.getDeclaracaoProcFuncao() != null)
        {
            node.getDeclaracaoProcFuncao().apply(this);
        }
        outAUnicoDeclaracaoProcFuncoes(node);
    }

    public void inAMultiploDeclaracaoProcFuncoes(AMultiploDeclaracaoProcFuncoes node)
    {
        defaultIn(node);
    }

    public void outAMultiploDeclaracaoProcFuncoes(AMultiploDeclaracaoProcFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploDeclaracaoProcFuncoes(AMultiploDeclaracaoProcFuncoes node)
    {
        inAMultiploDeclaracaoProcFuncoes(node);
        if(node.getDeclaracaoProcFuncao() != null)
        {
            node.getDeclaracaoProcFuncao().apply(this);
        }
        if(node.getDeclaracaoProcFuncoes() != null)
        {
            node.getDeclaracaoProcFuncoes().apply(this);
        }
        outAMultiploDeclaracaoProcFuncoes(node);
    }

    public void inAProcedureDeclaracaoProcFuncao(AProcedureDeclaracaoProcFuncao node)
    {
        defaultIn(node);
    }

    public void outAProcedureDeclaracaoProcFuncao(AProcedureDeclaracaoProcFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedureDeclaracaoProcFuncao(AProcedureDeclaracaoProcFuncao node)
    {
        inAProcedureDeclaracaoProcFuncao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDeclaracaoProcedure() != null)
        {
            node.getDeclaracaoProcedure().apply(this);
        }
        outAProcedureDeclaracaoProcFuncao(node);
    }

    public void inAFuncaoDeclaracaoProcFuncao(AFuncaoDeclaracaoProcFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDeclaracaoProcFuncao(AFuncaoDeclaracaoProcFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDeclaracaoProcFuncao(AFuncaoDeclaracaoProcFuncao node)
    {
        inAFuncaoDeclaracaoProcFuncao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDeclaracaoFuncao() != null)
        {
            node.getDeclaracaoFuncao().apply(this);
        }
        outAFuncaoDeclaracaoProcFuncao(node);
    }

    public void inADeclaracaoProcedure(ADeclaracaoProcedure node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoProcedure(ADeclaracaoProcedure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoProcedure(ADeclaracaoProcedure node)
    {
        inADeclaracaoProcedure(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getCabecalhoProcedure() != null)
        {
            node.getCabecalhoProcedure().apply(this);
        }
        outADeclaracaoProcedure(node);
    }

    public void inADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        inADeclaracaoFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getCabecalhoFuncao() != null)
        {
            node.getCabecalhoFuncao().apply(this);
        }
        outADeclaracaoFuncao(node);
    }

    public void inACabecalhoProcedure(ACabecalhoProcedure node)
    {
        defaultIn(node);
    }

    public void outACabecalhoProcedure(ACabecalhoProcedure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACabecalhoProcedure(ACabecalhoProcedure node)
    {
        inACabecalhoProcedure(node);
        if(node.getParametrosFormais() != null)
        {
            node.getParametrosFormais().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProcedure() != null)
        {
            node.getProcedure().apply(this);
        }
        outACabecalhoProcedure(node);
    }

    public void inACabecalhoFuncao(ACabecalhoFuncao node)
    {
        defaultIn(node);
    }

    public void outACabecalhoFuncao(ACabecalhoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACabecalhoFuncao(ACabecalhoFuncao node)
    {
        inACabecalhoFuncao(node);
        if(node.getTipoResultado() != null)
        {
            node.getTipoResultado().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getParametrosFormais() != null)
        {
            node.getParametrosFormais().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outACabecalhoFuncao(node);
    }

    public void inAParametrosFormais(AParametrosFormais node)
    {
        defaultIn(node);
    }

    public void outAParametrosFormais(AParametrosFormais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosFormais(AParametrosFormais node)
    {
        inAParametrosFormais(node);
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getSecaoParametrosFormais() != null)
        {
            node.getSecaoParametrosFormais().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        outAParametrosFormais(node);
    }

    public void inAEmptyParametrosFormais(AEmptyParametrosFormais node)
    {
        defaultIn(node);
    }

    public void outAEmptyParametrosFormais(AEmptyParametrosFormais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyParametrosFormais(AEmptyParametrosFormais node)
    {
        inAEmptyParametrosFormais(node);
        outAEmptyParametrosFormais(node);
    }

    public void inAUnicoSecaoParametrosFormais(AUnicoSecaoParametrosFormais node)
    {
        defaultIn(node);
    }

    public void outAUnicoSecaoParametrosFormais(AUnicoSecaoParametrosFormais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoSecaoParametrosFormais(AUnicoSecaoParametrosFormais node)
    {
        inAUnicoSecaoParametrosFormais(node);
        if(node.getSecaoParametroFormal() != null)
        {
            node.getSecaoParametroFormal().apply(this);
        }
        outAUnicoSecaoParametrosFormais(node);
    }

    public void inAMultiploSecaoParametrosFormais(AMultiploSecaoParametrosFormais node)
    {
        defaultIn(node);
    }

    public void outAMultiploSecaoParametrosFormais(AMultiploSecaoParametrosFormais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploSecaoParametrosFormais(AMultiploSecaoParametrosFormais node)
    {
        inAMultiploSecaoParametrosFormais(node);
        if(node.getSecaoParametroFormal() != null)
        {
            node.getSecaoParametroFormal().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getSecaoParametrosFormais() != null)
        {
            node.getSecaoParametrosFormais().apply(this);
        }
        outAMultiploSecaoParametrosFormais(node);
    }

    public void inAValorSecaoParametroFormal(AValorSecaoParametroFormal node)
    {
        defaultIn(node);
    }

    public void outAValorSecaoParametroFormal(AValorSecaoParametroFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorSecaoParametroFormal(AValorSecaoParametroFormal node)
    {
        inAValorSecaoParametroFormal(node);
        if(node.getSpecParamValor() != null)
        {
            node.getSpecParamValor().apply(this);
        }
        outAValorSecaoParametroFormal(node);
    }

    public void inAVariavelSecaoParametroFormal(AVariavelSecaoParametroFormal node)
    {
        defaultIn(node);
    }

    public void outAVariavelSecaoParametroFormal(AVariavelSecaoParametroFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelSecaoParametroFormal(AVariavelSecaoParametroFormal node)
    {
        inAVariavelSecaoParametroFormal(node);
        if(node.getSpecParamVariavel() != null)
        {
            node.getSpecParamVariavel().apply(this);
        }
        outAVariavelSecaoParametroFormal(node);
    }

    public void inAArraySecaoParametroFormal(AArraySecaoParametroFormal node)
    {
        defaultIn(node);
    }

    public void outAArraySecaoParametroFormal(AArraySecaoParametroFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySecaoParametroFormal(AArraySecaoParametroFormal node)
    {
        inAArraySecaoParametroFormal(node);
        if(node.getSpecParamArray() != null)
        {
            node.getSpecParamArray().apply(this);
        }
        outAArraySecaoParametroFormal(node);
    }

    public void inASpecParamValor(ASpecParamValor node)
    {
        defaultIn(node);
    }

    public void outASpecParamValor(ASpecParamValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecParamValor(ASpecParamValor node)
    {
        inASpecParamValor(node);
        if(node.getIdentificadorTipo() != null)
        {
            node.getIdentificadorTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        outASpecParamValor(node);
    }

    public void inASpecParamVariavel(ASpecParamVariavel node)
    {
        defaultIn(node);
    }

    public void outASpecParamVariavel(ASpecParamVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecParamVariavel(ASpecParamVariavel node)
    {
        inASpecParamVariavel(node);
        if(node.getIdentificadorTipo() != null)
        {
            node.getIdentificadorTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASpecParamVariavel(node);
    }

    public void inAValorSpecParamArray(AValorSpecParamArray node)
    {
        defaultIn(node);
    }

    public void outAValorSpecParamArray(AValorSpecParamArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorSpecParamArray(AValorSpecParamArray node)
    {
        inAValorSpecParamArray(node);
        if(node.getSpecParamArrayValor() != null)
        {
            node.getSpecParamArrayValor().apply(this);
        }
        outAValorSpecParamArray(node);
    }

    public void inAVariavelSpecParamArray(AVariavelSpecParamArray node)
    {
        defaultIn(node);
    }

    public void outAVariavelSpecParamArray(AVariavelSpecParamArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelSpecParamArray(AVariavelSpecParamArray node)
    {
        inAVariavelSpecParamArray(node);
        if(node.getSpecParamArrayVariavel() != null)
        {
            node.getSpecParamArrayVariavel().apply(this);
        }
        outAVariavelSpecParamArray(node);
    }

    public void inASpecParamArrayValor(ASpecParamArrayValor node)
    {
        defaultIn(node);
    }

    public void outASpecParamArrayValor(ASpecParamArrayValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecParamArrayValor(ASpecParamArrayValor node)
    {
        inASpecParamArrayValor(node);
        if(node.getSchemaArray() != null)
        {
            node.getSchemaArray().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        outASpecParamArrayValor(node);
    }

    public void inASpecParamArrayVariavel(ASpecParamArrayVariavel node)
    {
        defaultIn(node);
    }

    public void outASpecParamArrayVariavel(ASpecParamArrayVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecParamArrayVariavel(ASpecParamArrayVariavel node)
    {
        inASpecParamArrayVariavel(node);
        if(node.getSchemaArray() != null)
        {
            node.getSchemaArray().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASpecParamArrayVariavel(node);
    }

    public void inASchemaArray(ASchemaArray node)
    {
        defaultIn(node);
    }

    public void outASchemaArray(ASchemaArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaArray(ASchemaArray node)
    {
        inASchemaArray(node);
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getIdentificadorSchemaArray() != null)
        {
            node.getIdentificadorSchemaArray().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getSpecTiposIndices() != null)
        {
            node.getSpecTiposIndices().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outASchemaArray(node);
    }

    public void inAUnicoSpecTiposIndices(AUnicoSpecTiposIndices node)
    {
        defaultIn(node);
    }

    public void outAUnicoSpecTiposIndices(AUnicoSpecTiposIndices node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoSpecTiposIndices(AUnicoSpecTiposIndices node)
    {
        inAUnicoSpecTiposIndices(node);
        if(node.getSpecTipoIndice() != null)
        {
            node.getSpecTipoIndice().apply(this);
        }
        outAUnicoSpecTiposIndices(node);
    }

    public void inAMultiploSpecTiposIndices(AMultiploSpecTiposIndices node)
    {
        defaultIn(node);
    }

    public void outAMultiploSpecTiposIndices(AMultiploSpecTiposIndices node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploSpecTiposIndices(AMultiploSpecTiposIndices node)
    {
        inAMultiploSpecTiposIndices(node);
        if(node.getSpecTipoIndice() != null)
        {
            node.getSpecTipoIndice().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getSpecTiposIndices() != null)
        {
            node.getSpecTiposIndices().apply(this);
        }
        outAMultiploSpecTiposIndices(node);
    }

    public void inASpecTipoIndice(ASpecTipoIndice node)
    {
        defaultIn(node);
    }

    public void outASpecTipoIndice(ASpecTipoIndice node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecTipoIndice(ASpecTipoIndice node)
    {
        inASpecTipoIndice(node);
        if(node.getIdentificadorTipoOrdinal() != null)
        {
            node.getIdentificadorTipoOrdinal().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPontoPonto() != null)
        {
            node.getPontoPonto().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outASpecTipoIndice(node);
    }

    public void inAIdentificadorIdentificadorSchemaArray(AIdentificadorIdentificadorSchemaArray node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorIdentificadorSchemaArray(AIdentificadorIdentificadorSchemaArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorIdentificadorSchemaArray(AIdentificadorIdentificadorSchemaArray node)
    {
        inAIdentificadorIdentificadorSchemaArray(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorIdentificadorSchemaArray(node);
    }

    public void inAArrayIdentificadorSchemaArray(AArrayIdentificadorSchemaArray node)
    {
        defaultIn(node);
    }

    public void outAArrayIdentificadorSchemaArray(AArrayIdentificadorSchemaArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayIdentificadorSchemaArray(AArrayIdentificadorSchemaArray node)
    {
        inAArrayIdentificadorSchemaArray(node);
        if(node.getSchemaArray() != null)
        {
            node.getSchemaArray().apply(this);
        }
        outAArrayIdentificadorSchemaArray(node);
    }

    public void inAExistenteTipoResultado(AExistenteTipoResultado node)
    {
        defaultIn(node);
    }

    public void outAExistenteTipoResultado(AExistenteTipoResultado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistenteTipoResultado(AExistenteTipoResultado node)
    {
        inAExistenteTipoResultado(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExistenteTipoResultado(node);
    }

    public void inAOrdinalTipoResultado(AOrdinalTipoResultado node)
    {
        defaultIn(node);
    }

    public void outAOrdinalTipoResultado(AOrdinalTipoResultado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrdinalTipoResultado(AOrdinalTipoResultado node)
    {
        inAOrdinalTipoResultado(node);
        if(node.getIdentificadorTipoOrdinal() != null)
        {
            node.getIdentificadorTipoOrdinal().apply(this);
        }
        outAOrdinalTipoResultado(node);
    }

    public void inASentencaComposta(ASentencaComposta node)
    {
        defaultIn(node);
    }

    public void outASentencaComposta(ASentencaComposta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASentencaComposta(ASentencaComposta node)
    {
        inASentencaComposta(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getSequenciaSentencas() != null)
        {
            node.getSequenciaSentencas().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outASentencaComposta(node);
    }

    public void inAUnicoSequenciaSentencas(AUnicoSequenciaSentencas node)
    {
        defaultIn(node);
    }

    public void outAUnicoSequenciaSentencas(AUnicoSequenciaSentencas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoSequenciaSentencas(AUnicoSequenciaSentencas node)
    {
        inAUnicoSequenciaSentencas(node);
        if(node.getSentenca() != null)
        {
            node.getSentenca().apply(this);
        }
        outAUnicoSequenciaSentencas(node);
    }

    public void inAMultiploSequenciaSentencas(AMultiploSequenciaSentencas node)
    {
        defaultIn(node);
    }

    public void outAMultiploSequenciaSentencas(AMultiploSequenciaSentencas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploSequenciaSentencas(AMultiploSequenciaSentencas node)
    {
        inAMultiploSequenciaSentencas(node);
        if(node.getSentenca() != null)
        {
            node.getSentenca().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getSequenciaSentencas() != null)
        {
            node.getSequenciaSentencas().apply(this);
        }
        outAMultiploSequenciaSentencas(node);
    }

    public void inASentenca(ASentenca node)
    {
        defaultIn(node);
    }

    public void outASentenca(ASentenca node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASentenca(ASentenca node)
    {
        inASentenca(node);
        if(node.getDefinicaoSentenca() != null)
        {
            node.getDefinicaoSentenca().apply(this);
        }
        if(node.getLabelSentenca() != null)
        {
            node.getLabelSentenca().apply(this);
        }
        outASentenca(node);
    }

    public void inALabelSentenca(ALabelSentenca node)
    {
        defaultIn(node);
    }

    public void outALabelSentenca(ALabelSentenca node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelSentenca(ALabelSentenca node)
    {
        inALabelSentenca(node);
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outALabelSentenca(node);
    }

    public void inAEmptyLabelSentenca(AEmptyLabelSentenca node)
    {
        defaultIn(node);
    }

    public void outAEmptyLabelSentenca(AEmptyLabelSentenca node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLabelSentenca(AEmptyLabelSentenca node)
    {
        inAEmptyLabelSentenca(node);
        outAEmptyLabelSentenca(node);
    }

    public void inASimplesDefinicaoSentenca(ASimplesDefinicaoSentenca node)
    {
        defaultIn(node);
    }

    public void outASimplesDefinicaoSentenca(ASimplesDefinicaoSentenca node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesDefinicaoSentenca(ASimplesDefinicaoSentenca node)
    {
        inASimplesDefinicaoSentenca(node);
        if(node.getSentencaSimples() != null)
        {
            node.getSentencaSimples().apply(this);
        }
        outASimplesDefinicaoSentenca(node);
    }

    public void inAEstruturadaDefinicaoSentenca(AEstruturadaDefinicaoSentenca node)
    {
        defaultIn(node);
    }

    public void outAEstruturadaDefinicaoSentenca(AEstruturadaDefinicaoSentenca node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEstruturadaDefinicaoSentenca(AEstruturadaDefinicaoSentenca node)
    {
        inAEstruturadaDefinicaoSentenca(node);
        if(node.getSentencaEstruturada() != null)
        {
            node.getSentencaEstruturada().apply(this);
        }
        outAEstruturadaDefinicaoSentenca(node);
    }

    public void inAAtribuicaoSentencaSimples(AAtribuicaoSentencaSimples node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoSentencaSimples(AAtribuicaoSentencaSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoSentencaSimples(AAtribuicaoSentencaSimples node)
    {
        inAAtribuicaoSentencaSimples(node);
        if(node.getSentencaAtribuicao() != null)
        {
            node.getSentencaAtribuicao().apply(this);
        }
        outAAtribuicaoSentencaSimples(node);
    }

    public void inAEmptySentencaSimples(AEmptySentencaSimples node)
    {
        defaultIn(node);
    }

    public void outAEmptySentencaSimples(AEmptySentencaSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySentencaSimples(AEmptySentencaSimples node)
    {
        inAEmptySentencaSimples(node);
        outAEmptySentencaSimples(node);
    }

    public void inASentencaAtribuicao(ASentencaAtribuicao node)
    {
        defaultIn(node);
    }

    public void outASentencaAtribuicao(ASentencaAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASentencaAtribuicao(ASentencaAtribuicao node)
    {
        inASentencaAtribuicao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getAcessoVariavel() != null)
        {
            node.getAcessoVariavel().apply(this);
        }
        outASentencaAtribuicao(node);
    }

    public void inASentencaEstruturada(ASentencaEstruturada node)
    {
        defaultIn(node);
    }

    public void outASentencaEstruturada(ASentencaEstruturada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASentencaEstruturada(ASentencaEstruturada node)
    {
        inASentencaEstruturada(node);
        if(node.getSentencaComposta() != null)
        {
            node.getSentencaComposta().apply(this);
        }
        outASentencaEstruturada(node);
    }

    public void inAAcessoVariavel(AAcessoVariavel node)
    {
        defaultIn(node);
    }

    public void outAAcessoVariavel(AAcessoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAcessoVariavel(AAcessoVariavel node)
    {
        inAAcessoVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAcessoVariavel(node);
    }

    public void inAExpressao(AExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpressao(AExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressao(AExpressao node)
    {
        inAExpressao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExpressao(node);
    }
}
