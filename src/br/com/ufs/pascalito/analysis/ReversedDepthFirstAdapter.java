/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.analysis;

import java.util.*;
import br.com.ufs.pascalito.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getCabecalhoPrograma() != null)
        {
            node.getCabecalhoPrograma().apply(this);
        }
        outAProgram(node);
    }

    public void inAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        defaultIn(node);
    }

    public void outAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoCabecalhoPrograma(AUnicoCabecalhoPrograma node)
    {
        inAUnicoCabecalhoPrograma(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAUnicoCabecalhoPrograma(node);
    }

    public void inAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        defaultIn(node);
    }

    public void outAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploCabecalhoPrograma(AMultiploCabecalhoPrograma node)
    {
        inAMultiploCabecalhoPrograma(node);
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAMultiploCabecalhoPrograma(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getDeclaracaoLabels() != null)
        {
            node.getDeclaracaoLabels().apply(this);
        }
        outABloco(node);
    }

    public void inAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        defaultIn(node);
    }

    public void outAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoIdentificadores(AUnicoIdentificadores node)
    {
        inAUnicoIdentificadores(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAUnicoIdentificadores(node);
    }

    public void inAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        defaultIn(node);
    }

    public void outAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploIdentificadores(AMultiploIdentificadores node)
    {
        inAMultiploIdentificadores(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificadores() != null)
        {
            node.getIdentificadores().apply(this);
        }
        outAMultiploIdentificadores(node);
    }

    public void inADeclaracaoLabels(ADeclaracaoLabels node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoLabels(ADeclaracaoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoLabels(ADeclaracaoLabels node)
    {
        inADeclaracaoLabels(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getLabels() != null)
        {
            node.getLabels().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outADeclaracaoLabels(node);
    }

    public void inAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracaoLabels(AEmptyDeclaracaoLabels node)
    {
        inAEmptyDeclaracaoLabels(node);
        outAEmptyDeclaracaoLabels(node);
    }

    public void inAUnicoLabels(AUnicoLabels node)
    {
        defaultIn(node);
    }

    public void outAUnicoLabels(AUnicoLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoLabels(AUnicoLabels node)
    {
        inAUnicoLabels(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAUnicoLabels(node);
    }

    public void inAMultiploLabels(AMultiploLabels node)
    {
        defaultIn(node);
    }

    public void outAMultiploLabels(AMultiploLabels node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploLabels(AMultiploLabels node)
    {
        inAMultiploLabels(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getLabels() != null)
        {
            node.getLabels().apply(this);
        }
        outAMultiploLabels(node);
    }

    public void inALabel(ALabel node)
    {
        defaultIn(node);
    }

    public void outALabel(ALabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        inALabel(node);
        if(node.getConstInteiro() != null)
        {
            node.getConstInteiro().apply(this);
        }
        outALabel(node);
    }
}
