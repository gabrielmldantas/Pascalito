/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.parser;

import br.com.ufs.pascalito.lexer.*;
import br.com.ufs.pascalito.node.*;
import br.com.ufs.pascalito.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AUnicoProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AMultiploProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ABloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AUnicoIdentificadores */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AMultiploIdentificadores */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AIntegerIdentificadorTipoOrdinal */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AStringIdentificadorTipoOrdinal */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ABooleanIdentificadorTipoOrdinal */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIdentificadorIdentificadorTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AOrdinalIdentificadorTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ADeclaracaoLabels */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AEmptyDeclaracaoLabels */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AUnicoLabels */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AMultiploLabels */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ALabel */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce ADeclaracaoTipos */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce AEmptyDeclaracaoTipos */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AUnicoDefinicaoTipos */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AMultiploDefinicaoTipos */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce ADefinicaoTipo */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AExistenteDenotadorTipo */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AOrdinalDenotadorTipo */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AOrdinalNovoTipo */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AArrayNovoTipo */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ATipoArray */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AUnicoTiposOrdinais */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce AMultiploTiposOrdinais */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce ANovoTipoOrdinal */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce AExistenteTipoOrdinal */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AEnumeradoNovoTipoOrdinal */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list);
            }
            break;
            case 30: /* reduce ASubrangeNovoTipoOrdinal */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce ATipoEnumerado */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce ATipoSubrange */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list);
            }
            break;
            case 33: /* reduce ASomaSinal */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list);
            }
            break;
            case 34: /* reduce ASubtracaoSinal */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AAnumeroconstante1Constante */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list);
            }
            break;
            case 36: /* reduce AAnumeroconstante2Constante */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list);
            }
            break;
            case 37: /* reduce AStringConstante */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list);
            }
            break;
            case 38: /* reduce ABooleanConstante */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list);
            }
            break;
            case 39: /* reduce ANumeroConstanteSemSinal */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list);
            }
            break;
            case 40: /* reduce AStringConstanteSemSinal */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list);
            }
            break;
            case 41: /* reduce ABooleanConstanteSemSinal */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list);
            }
            break;
            case 42: /* reduce ADeclaracoesVariaveis */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list);
            }
            break;
            case 43: /* reduce AEmptyDeclaracoesVariaveis */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list);
            }
            break;
            case 44: /* reduce AUnicoDeclaracaoVariaveis */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list);
            }
            break;
            case 45: /* reduce AMultiploDeclaracaoVariaveis */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list);
            }
            break;
            case 46: /* reduce ADeclaracaoVariavel */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list);
            }
            break;
            case 47: /* reduce ADeclaracoesProcFuncoes */
            {
                ArrayList<Object> list = new47();
                push(goTo(25), list);
            }
            break;
            case 48: /* reduce AEmptyDeclaracoesProcFuncoes */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list);
            }
            break;
            case 49: /* reduce AUnicoDeclaracaoProcFuncoes */
            {
                ArrayList<Object> list = new49();
                push(goTo(26), list);
            }
            break;
            case 50: /* reduce AMultiploDeclaracaoProcFuncoes */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list);
            }
            break;
            case 51: /* reduce AProcedureDeclaracaoProcFuncao */
            {
                ArrayList<Object> list = new51();
                push(goTo(27), list);
            }
            break;
            case 52: /* reduce AFuncaoDeclaracaoProcFuncao */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list);
            }
            break;
            case 53: /* reduce ADeclaracaoProcedure */
            {
                ArrayList<Object> list = new53();
                push(goTo(28), list);
            }
            break;
            case 54: /* reduce ADeclaracaoFuncao */
            {
                ArrayList<Object> list = new54();
                push(goTo(29), list);
            }
            break;
            case 55: /* reduce ACabecalhoProcedure */
            {
                ArrayList<Object> list = new55();
                push(goTo(30), list);
            }
            break;
            case 56: /* reduce ACabecalhoFuncao */
            {
                ArrayList<Object> list = new56();
                push(goTo(31), list);
            }
            break;
            case 57: /* reduce AParametrosFormais */
            {
                ArrayList<Object> list = new57();
                push(goTo(32), list);
            }
            break;
            case 58: /* reduce AEmptyParametrosFormais */
            {
                ArrayList<Object> list = new58();
                push(goTo(32), list);
            }
            break;
            case 59: /* reduce AUnicoSecaoParametrosFormais */
            {
                ArrayList<Object> list = new59();
                push(goTo(33), list);
            }
            break;
            case 60: /* reduce AMultiploSecaoParametrosFormais */
            {
                ArrayList<Object> list = new60();
                push(goTo(33), list);
            }
            break;
            case 61: /* reduce AValorSecaoParametroFormal */
            {
                ArrayList<Object> list = new61();
                push(goTo(34), list);
            }
            break;
            case 62: /* reduce AVariavelSecaoParametroFormal */
            {
                ArrayList<Object> list = new62();
                push(goTo(34), list);
            }
            break;
            case 63: /* reduce AArraySecaoParametroFormal */
            {
                ArrayList<Object> list = new63();
                push(goTo(34), list);
            }
            break;
            case 64: /* reduce ASpecParamValor */
            {
                ArrayList<Object> list = new64();
                push(goTo(35), list);
            }
            break;
            case 65: /* reduce ASpecParamVariavel */
            {
                ArrayList<Object> list = new65();
                push(goTo(36), list);
            }
            break;
            case 66: /* reduce AValorSpecParamArray */
            {
                ArrayList<Object> list = new66();
                push(goTo(37), list);
            }
            break;
            case 67: /* reduce AVariavelSpecParamArray */
            {
                ArrayList<Object> list = new67();
                push(goTo(37), list);
            }
            break;
            case 68: /* reduce ASpecParamArrayValor */
            {
                ArrayList<Object> list = new68();
                push(goTo(38), list);
            }
            break;
            case 69: /* reduce ASpecParamArrayVariavel */
            {
                ArrayList<Object> list = new69();
                push(goTo(39), list);
            }
            break;
            case 70: /* reduce ASchemaArray */
            {
                ArrayList<Object> list = new70();
                push(goTo(40), list);
            }
            break;
            case 71: /* reduce AUnicoSpecTiposIndices */
            {
                ArrayList<Object> list = new71();
                push(goTo(41), list);
            }
            break;
            case 72: /* reduce AMultiploSpecTiposIndices */
            {
                ArrayList<Object> list = new72();
                push(goTo(41), list);
            }
            break;
            case 73: /* reduce ASpecTipoIndice */
            {
                ArrayList<Object> list = new73();
                push(goTo(42), list);
            }
            break;
            case 74: /* reduce AIdentificadorIdentificadorSchemaArray */
            {
                ArrayList<Object> list = new74();
                push(goTo(43), list);
            }
            break;
            case 75: /* reduce AArrayIdentificadorSchemaArray */
            {
                ArrayList<Object> list = new75();
                push(goTo(43), list);
            }
            break;
            case 76: /* reduce AExistenteTipoResultado */
            {
                ArrayList<Object> list = new76();
                push(goTo(44), list);
            }
            break;
            case 77: /* reduce AOrdinalTipoResultado */
            {
                ArrayList<Object> list = new77();
                push(goTo(44), list);
            }
            break;
            case 78: /* reduce ASentencaComposta */
            {
                ArrayList<Object> list = new78();
                push(goTo(45), list);
            }
            break;
            case 79: /* reduce AUnicoSequenciaSentencas */
            {
                ArrayList<Object> list = new79();
                push(goTo(46), list);
            }
            break;
            case 80: /* reduce AMultiploSequenciaSentencas */
            {
                ArrayList<Object> list = new80();
                push(goTo(46), list);
            }
            break;
            case 81: /* reduce ASimplesSentenca */
            {
                ArrayList<Object> list = new81();
                push(goTo(47), list);
            }
            break;
            case 82: /* reduce AEstruturadaSentenca */
            {
                ArrayList<Object> list = new82();
                push(goTo(47), list);
            }
            break;
            case 83: /* reduce ASimplesDefinicaoSentenca */
            {
                ArrayList<Object> list = new83();
                push(goTo(48), list);
            }
            break;
            case 84: /* reduce AEstruturadaDefinicaoSentenca */
            {
                ArrayList<Object> list = new84();
                push(goTo(48), list);
            }
            break;
            case 85: /* reduce AEstruturadaFechadaDefinicaoSentenca */
            {
                ArrayList<Object> list = new85();
                push(goTo(48), list);
            }
            break;
            case 86: /* reduce ASimplesDefinicaoSentencaFechada */
            {
                ArrayList<Object> list = new86();
                push(goTo(49), list);
            }
            break;
            case 87: /* reduce AEstruturadaDefinicaoSentencaFechada */
            {
                ArrayList<Object> list = new87();
                push(goTo(49), list);
            }
            break;
            case 88: /* reduce A1DefinicaoSentencaSimples */
            {
                ArrayList<Object> list = new88();
                push(goTo(50), list);
            }
            break;
            case 89: /* reduce AEmpty1DefinicaoSentencaSimples */
            {
                ArrayList<Object> list = new89();
                push(goTo(50), list);
            }
            break;
            case 90: /* reduce A1DefinicaoSentencaEstruturada */
            {
                ArrayList<Object> list = new90();
                push(goTo(51), list);
            }
            break;
            case 91: /* reduce AEmpty1DefinicaoSentencaEstruturada */
            {
                ArrayList<Object> list = new91();
                push(goTo(51), list);
            }
            break;
            case 92: /* reduce A1DefinicaoSentencaEstruturadaFechada */
            {
                ArrayList<Object> list = new92();
                push(goTo(52), list);
            }
            break;
            case 93: /* reduce AEmpty1DefinicaoSentencaEstruturadaFechada */
            {
                ArrayList<Object> list = new93();
                push(goTo(52), list);
            }
            break;
            case 94: /* reduce AAtribuicaoSentencaSimples */
            {
                ArrayList<Object> list = new94();
                push(goTo(53), list);
            }
            break;
            case 95: /* reduce AProcedureSentencaSimples */
            {
                ArrayList<Object> list = new95();
                push(goTo(53), list);
            }
            break;
            case 96: /* reduce AGotoSentencaSimples */
            {
                ArrayList<Object> list = new96();
                push(goTo(53), list);
            }
            break;
            case 97: /* reduce AEmptySentencaSimples */
            {
                ArrayList<Object> list = new97();
                push(goTo(53), list);
            }
            break;
            case 98: /* reduce ASentencaAtribuicao */
            {
                ArrayList<Object> list = new98();
                push(goTo(54), list);
            }
            break;
            case 99: /* reduce ASentencaProcFuncao */
            {
                ArrayList<Object> list = new99();
                push(goTo(55), list);
            }
            break;
            case 100: /* reduce AParametrosReais */
            {
                ArrayList<Object> list = new100();
                push(goTo(56), list);
            }
            break;
            case 101: /* reduce AEmptyParametrosReais */
            {
                ArrayList<Object> list = new101();
                push(goTo(56), list);
            }
            break;
            case 102: /* reduce AUnicoDefinicaoParametrosReais */
            {
                ArrayList<Object> list = new102();
                push(goTo(57), list);
            }
            break;
            case 103: /* reduce AMultiploDefinicaoParametrosReais */
            {
                ArrayList<Object> list = new103();
                push(goTo(57), list);
            }
            break;
            case 104: /* reduce ACompostaSentencaEstruturada */
            {
                ArrayList<Object> list = new104();
                push(goTo(58), list);
            }
            break;
            case 105: /* reduce AWhileSentencaEstruturada */
            {
                ArrayList<Object> list = new105();
                push(goTo(58), list);
            }
            break;
            case 106: /* reduce AIfSentencaEstruturada */
            {
                ArrayList<Object> list = new106();
                push(goTo(58), list);
            }
            break;
            case 107: /* reduce ACompostaSentencaEstruturadaFechada */
            {
                ArrayList<Object> list = new107();
                push(goTo(59), list);
            }
            break;
            case 108: /* reduce AWhileSentencaEstruturadaFechada */
            {
                ArrayList<Object> list = new108();
                push(goTo(59), list);
            }
            break;
            case 109: /* reduce ASentencaWhile */
            {
                ArrayList<Object> list = new109();
                push(goTo(60), list);
            }
            break;
            case 110: /* reduce AEstruturadaSentencaWhile */
            {
                ArrayList<Object> list = new110();
                push(goTo(60), list);
            }
            break;
            case 111: /* reduce ASentencaWhileFechada */
            {
                ArrayList<Object> list = new111();
                push(goTo(61), list);
            }
            break;
            case 112: /* reduce ASentencaGoto */
            {
                ArrayList<Object> list = new112();
                push(goTo(62), list);
            }
            break;
            case 113: /* reduce ASentencaIf */
            {
                ArrayList<Object> list = new113();
                push(goTo(63), list);
            }
            break;
            case 114: /* reduce AElseSentencaIf */
            {
                ArrayList<Object> list = new114();
                push(goTo(63), list);
            }
            break;
            case 115: /* reduce AIfSentencaIfFechada */
            {
                ArrayList<Object> list = new115();
                push(goTo(64), list);
            }
            break;
            case 116: /* reduce ASentencaIfFechada */
            {
                ArrayList<Object> list = new116();
                push(goTo(64), list);
            }
            break;
            case 117: /* reduce AAcessoVariavel */
            {
                ArrayList<Object> list = new117();
                push(goTo(65), list);
            }
            break;
            case 118: /* reduce AIndexadaAcessoVariavel */
            {
                ArrayList<Object> list = new118();
                push(goTo(65), list);
            }
            break;
            case 119: /* reduce AVariavelIndexada */
            {
                ArrayList<Object> list = new119();
                push(goTo(66), list);
            }
            break;
            case 120: /* reduce AUnicoExpressoes */
            {
                ArrayList<Object> list = new120();
                push(goTo(67), list);
            }
            break;
            case 121: /* reduce AMultiploExpressoes */
            {
                ArrayList<Object> list = new121();
                push(goTo(67), list);
            }
            break;
            case 122: /* reduce AExpressao */
            {
                ArrayList<Object> list = new122();
                push(goTo(68), list);
            }
            break;
            case 123: /* reduce AExpressaoRelacional */
            {
                ArrayList<Object> list = new123();
                push(goTo(69), list);
            }
            break;
            case 124: /* reduce AEmptyExpressaoRelacional */
            {
                ArrayList<Object> list = new124();
                push(goTo(69), list);
            }
            break;
            case 125: /* reduce AUnicoComSinalExpressaoSimples */
            {
                ArrayList<Object> list = new125();
                push(goTo(70), list);
            }
            break;
            case 126: /* reduce AUnicoSemSinalExpressaoSimples */
            {
                ArrayList<Object> list = new126();
                push(goTo(70), list);
            }
            break;
            case 127: /* reduce AMultiploSemSinalExpressaoSimples */
            {
                ArrayList<Object> list = new127();
                push(goTo(70), list);
            }
            break;
            case 128: /* reduce AMultiploComSinalExpressaoSimples */
            {
                ArrayList<Object> list = new128();
                push(goTo(70), list);
            }
            break;
            case 129: /* reduce AUnicoTermo */
            {
                ArrayList<Object> list = new129();
                push(goTo(71), list);
            }
            break;
            case 130: /* reduce AMultiploTermo */
            {
                ArrayList<Object> list = new130();
                push(goTo(71), list);
            }
            break;
            case 131: /* reduce AConstanteSemSinalFator */
            {
                ArrayList<Object> list = new131();
                push(goTo(72), list);
            }
            break;
            case 132: /* reduce AExpressaoFator */
            {
                ArrayList<Object> list = new132();
                push(goTo(72), list);
            }
            break;
            case 133: /* reduce ANotFator */
            {
                ArrayList<Object> list = new133();
                push(goTo(72), list);
            }
            break;
            case 134: /* reduce AFuncaoOuVariavelFator */
            {
                ArrayList<Object> list = new134();
                push(goTo(72), list);
            }
            break;
            case 135: /* reduce AVarIndexadaFator */
            {
                ArrayList<Object> list = new135();
                push(goTo(72), list);
            }
            break;
            case 136: /* reduce AMenorOperadorRelacional */
            {
                ArrayList<Object> list = new136();
                push(goTo(73), list);
            }
            break;
            case 137: /* reduce AMenorIgualOperadorRelacional */
            {
                ArrayList<Object> list = new137();
                push(goTo(73), list);
            }
            break;
            case 138: /* reduce AMaiorOperadorRelacional */
            {
                ArrayList<Object> list = new138();
                push(goTo(73), list);
            }
            break;
            case 139: /* reduce AMaiorIgualOperadorRelacional */
            {
                ArrayList<Object> list = new139();
                push(goTo(73), list);
            }
            break;
            case 140: /* reduce AIgualOperadorRelacional */
            {
                ArrayList<Object> list = new140();
                push(goTo(73), list);
            }
            break;
            case 141: /* reduce ADiferenteOperadorRelacional */
            {
                ArrayList<Object> list = new141();
                push(goTo(73), list);
            }
            break;
            case 142: /* reduce ASomaSubOperadorAditivo */
            {
                ArrayList<Object> list = new142();
                push(goTo(74), list);
            }
            break;
            case 143: /* reduce AOrOperadorAditivo */
            {
                ArrayList<Object> list = new143();
                push(goTo(74), list);
            }
            break;
            case 144: /* reduce AMultiplicacaoOperadorMultiplicativo */
            {
                ArrayList<Object> list = new144();
                push(goTo(75), list);
            }
            break;
            case 145: /* reduce ADivisaoOperadorMultiplicativo */
            {
                ArrayList<Object> list = new145();
                push(goTo(75), list);
            }
            break;
            case 146: /* reduce AAndOperadorMultiplicativo */
            {
                ArrayList<Object> list = new146();
                push(goTo(75), list);
            }
            break;
            case 147: /* reduce ADivOperadorMultiplicativo */
            {
                ArrayList<Object> list = new147();
                push(goTo(75), list);
            }
            break;
            case 148: /* reduce AModOperadorMultiplicativo */
            {
                ArrayList<Object> list = new148();
                push(goTo(75), list);
            }
            break;
            case 149: /* reduce ATerminal$Sinal */
            {
                ArrayList<Object> list = new149();
                push(goTo(76), list);
            }
            break;
            case 150: /* reduce ANonTerminal$Sinal */
            {
                ArrayList<Object> list = new150();
                push(goTo(76), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AUnicoProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PString pstringNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBloco pblocoNode5;
        {
            // Block
        TIdentificador tidentificadorNode3;
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);

        pstringNode2 = new AString(tidentificadorNode3);
        }
        {
            // Block
        }
        pblocoNode5 = (PBloco)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(pstringNode2, listNode4, pblocoNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMultiploProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PString pstringNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PBloco pblocoNode6;
        {
            // Block
        TIdentificador tidentificadorNode3;
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);

        pstringNode2 = new AString(tidentificadorNode3);
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pblocoNode6 = (PBloco)nodeArrayList7.get(0);

        pprogramNode1 = new AProgram(pstringNode2, listNode5, pblocoNode6);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ABloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pblocoNode1 = new ABloco(listNode3, listNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AUnicoIdentificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PString pstringNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pstringNode1 = new AString(tidentificadorNode2);
        }
	if(pstringNode1 != null)
	{
	  listNode3.add(pstringNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultiploIdentificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PString pstringNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        {
            // Block
        TIdentificador tidentificadorNode3;
        tidentificadorNode3 = (TIdentificador)nodeArrayList3.get(0);

        pstringNode2 = new AString(tidentificadorNode3);
        }
	if(listNode1 != null)
	{
	  listNode4.addAll(listNode1);
	}
	if(pstringNode2 != null)
	{
	  listNode4.add(pstringNode2);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIntegerIdentificadorTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new AIntegerTipoPrimitivo(tintegerNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AStringIdentificadorTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new AStringTipoPrimitivo(tstringNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABooleanIdentificadorTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new ABooleanTipoPrimitivo(tbooleanNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdentificadorIdentificadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AOrdinalIdentificadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADeclaracaoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEmptyDeclaracaoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AUnicoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNumeroSemSinal pnumerosemsinalNode1;
        pnumerosemsinalNode1 = (PNumeroSemSinal)nodeArrayList1.get(0);
	if(pnumerosemsinalNode1 != null)
	{
	  listNode2.add(pnumerosemsinalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMultiploLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PNumeroSemSinal pnumerosemsinalNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pnumerosemsinalNode1 = (PNumeroSemSinal)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pnumerosemsinalNode1 != null)
	{
	  listNode3.add(pnumerosemsinalNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ALabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumeroSemSinal pnumerosemsinalNode1;
        {
            // Block
        TConstInteiro tconstinteiroNode2;
        tconstinteiroNode2 = (TConstInteiro)nodeArrayList1.get(0);

        pnumerosemsinalNode1 = new ANumeroSemSinal(tconstinteiroNode2);
        }
	nodeList.add(pnumerosemsinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADeclaracaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AEmptyDeclaracaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AUnicoDefinicaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDefinicaoTipo pdefinicaotipoNode1;
        pdefinicaotipoNode1 = (PDefinicaoTipo)nodeArrayList1.get(0);
	if(pdefinicaotipoNode1 != null)
	{
	  listNode2.add(pdefinicaotipoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMultiploDefinicaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDefinicaoTipo pdefinicaotipoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdefinicaotipoNode1 = (PDefinicaoTipo)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pdefinicaotipoNode1 != null)
	{
	  listNode3.add(pdefinicaotipoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADefinicaoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefinicaoTipo pdefinicaotipoNode1;
        {
            // Block
        PString pstringNode2;
        PDenotadorTipo pdenotadortipoNode4;
        {
            // Block
        TIdentificador tidentificadorNode3;
        tidentificadorNode3 = (TIdentificador)nodeArrayList1.get(0);

        pstringNode2 = new AString(tidentificadorNode3);
        }
        pdenotadortipoNode4 = (PDenotadorTipo)nodeArrayList3.get(0);

        pdefinicaotipoNode1 = new ADefinicaoTipo(pstringNode2, pdenotadortipoNode4);
        }
	nodeList.add(pdefinicaotipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExistenteDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        PTipoIdOuOrdinal ptipoidouordinalNode2;
        {
            // Block
        PTipoIdentificador ptipoidentificadorNode3;
        {
            // Block
        PString pstringNode4;
        {
            // Block
        TIdentificador tidentificadorNode5;
        tidentificadorNode5 = (TIdentificador)nodeArrayList1.get(0);

        pstringNode4 = new AString(tidentificadorNode5);
        }

        ptipoidentificadorNode3 = new ATipoIdentificador(pstringNode4);
        }

        ptipoidouordinalNode2 = new AIdTipoIdOuOrdinal(ptipoidentificadorNode3);
        }

        pdenotadortipoNode1 = new AIdOuOrdinalDenotadorTipo(ptipoidouordinalNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AOrdinalDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        PTipoPrimitivo ptipoprimitivoNode2;
        ptipoprimitivoNode2 = (PTipoPrimitivo)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new APrimitivoDenotadorTipo(ptipoprimitivoNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AOrdinalNovoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArrayNovoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATipoArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoArray ptipoarrayNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PDenotadorTipo pdenotadortipoNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pdenotadortipoNode4 = (PDenotadorTipo)nodeArrayList6.get(0);

        ptipoarrayNode1 = new ATipoArray(listNode3, pdenotadortipoNode4);
        }
	nodeList.add(ptipoarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AUnicoTiposOrdinais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        ptipoidouordinalNode1 = (PTipoIdOuOrdinal)nodeArrayList1.get(0);
	if(ptipoidouordinalNode1 != null)
	{
	  listNode2.add(ptipoidouordinalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMultiploTiposOrdinais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        ptipoidouordinalNode1 = (PTipoIdOuOrdinal)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(ptipoidouordinalNode1 != null)
	{
	  listNode3.add(ptipoidouordinalNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        ptipoidouordinalNode1 = (PTipoIdOuOrdinal)nodeArrayList1.get(0);
	nodeList.add(ptipoidouordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExistenteTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        {
            // Block
        PTipoIdentificador ptipoidentificadorNode2;
        {
            // Block
        PString pstringNode3;
        {
            // Block
        TIdentificador tidentificadorNode4;
        tidentificadorNode4 = (TIdentificador)nodeArrayList1.get(0);

        pstringNode3 = new AString(tidentificadorNode4);
        }

        ptipoidentificadorNode2 = new ATipoIdentificador(pstringNode3);
        }

        ptipoidouordinalNode1 = new AIdTipoIdOuOrdinal(ptipoidentificadorNode2);
        }
	nodeList.add(ptipoidouordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEnumeradoNovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        {
            // Block
        PTipoEnumerado ptipoenumeradoNode2;
        ptipoenumeradoNode2 = (PTipoEnumerado)nodeArrayList1.get(0);

        ptipoidouordinalNode1 = new AEnumeradoTipoIdOuOrdinal(ptipoenumeradoNode2);
        }
	nodeList.add(ptipoidouordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASubrangeNovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoIdOuOrdinal ptipoidouordinalNode1;
        {
            // Block
        PTipoSubrange ptiposubrangeNode2;
        ptiposubrangeNode2 = (PTipoSubrange)nodeArrayList1.get(0);

        ptipoidouordinalNode1 = new ASubrangeTipoIdOuOrdinal(ptiposubrangeNode2);
        }
	nodeList.add(ptipoidouordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATipoEnumerado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoEnumerado ptipoenumeradoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptipoenumeradoNode1 = new ATipoEnumerado(listNode3);
        }
	nodeList.add(ptipoenumeradoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATipoSubrange */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoSubrange ptiposubrangeNode1;
        {
            // Block
        PConstante pconstanteNode2;
        PConstante pconstanteNode3;
        pconstanteNode2 = (PConstante)nodeArrayList1.get(0);
        pconstanteNode3 = (PConstante)nodeArrayList3.get(0);

        ptiposubrangeNode1 = new ATipoSubrange(pconstanteNode2, pconstanteNode3);
        }
	nodeList.add(ptiposubrangeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ASomaSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinal psinalNode1;
        {
            // Block
        TSoma tsomaNode2;
        tsomaNode2 = (TSoma)nodeArrayList1.get(0);

        psinalNode1 = new AMaisSinal(tsomaNode2);
        }
	nodeList.add(psinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASubtracaoSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinal psinalNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);

        psinalNode1 = new AMenosSinal(tsubtracaoNode2);
        }
	nodeList.add(psinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAnumeroconstante1Constante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TConstInteiro tconstinteiroNode3;
        tconstinteiroNode3 = (TConstInteiro)nodeArrayList1.get(0);

        pconstanteNode1 = new AInteiroConstante(null, tconstinteiroNode3);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAnumeroconstante2Constante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        PSinal psinalNode2;
        TConstInteiro tconstinteiroNode3;
        psinalNode2 = (PSinal)nodeArrayList1.get(0);
        tconstinteiroNode3 = (TConstInteiro)nodeArrayList2.get(0);

        pconstanteNode1 = new AInteiroConstante(psinalNode2, tconstinteiroNode3);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AStringConstante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstString tconststringNode2;
        tconststringNode2 = (TConstString)nodeArrayList1.get(0);

        pconstanteNode1 = new AStringConstante(tconststringNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ABooleanConstante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstBooleana tconstbooleanaNode2;
        tconstbooleanaNode2 = (TConstBooleana)nodeArrayList1.get(0);

        pconstanteNode1 = new ABooleanConstante(tconstbooleanaNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANumeroConstanteSemSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TConstInteiro tconstinteiroNode3;
        tconstinteiroNode3 = (TConstInteiro)nodeArrayList1.get(0);

        pconstanteNode1 = new AInteiroConstante(null, tconstinteiroNode3);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AStringConstanteSemSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstString tconststringNode2;
        tconststringNode2 = (TConstString)nodeArrayList1.get(0);

        pconstanteNode1 = new AStringConstante(tconststringNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ABooleanConstanteSemSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstBooleana tconstbooleanaNode2;
        tconstbooleanaNode2 = (TConstBooleana)nodeArrayList1.get(0);

        pconstanteNode1 = new ABooleanConstante(tconstbooleanaNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADeclaracoesVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEmptyDeclaracoesVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AUnicoDeclaracaoVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMultiploDeclaracaoVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ADeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADeclaracoesProcFuncoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEmptyDeclaracoesProcFuncoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AUnicoDeclaracaoProcFuncoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultiploDeclaracaoProcFuncoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AProcedureDeclaracaoProcFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFuncaoDeclaracaoProcFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ADeclaracaoProcedure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ADeclaracaoFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACabecalhoProcedure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACabecalhoFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AParametrosFormais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEmptyParametrosFormais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AUnicoSecaoParametrosFormais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMultiploSecaoParametrosFormais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AValorSecaoParametroFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AVariavelSecaoParametroFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AArraySecaoParametroFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ASpecParamValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASpecParamVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AValorSpecParamArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AVariavelSpecParamArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASpecParamArrayValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ASpecParamArrayVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ASchemaArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AUnicoSpecTiposIndices */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMultiploSpecTiposIndices */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ASpecTipoIndice */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIdentificadorIdentificadorSchemaArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AArrayIdentificadorSchemaArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AExistenteTipoResultado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AOrdinalTipoResultado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ASentencaComposta */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AUnicoSequenciaSentencas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AMultiploSequenciaSentencas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ASimplesSentenca */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AEstruturadaSentenca */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ASimplesDefinicaoSentenca */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AEstruturadaDefinicaoSentenca */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AEstruturadaFechadaDefinicaoSentenca */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ASimplesDefinicaoSentencaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AEstruturadaDefinicaoSentencaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce A1DefinicaoSentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AEmpty1DefinicaoSentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce A1DefinicaoSentencaEstruturada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AEmpty1DefinicaoSentencaEstruturada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce A1DefinicaoSentencaEstruturadaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AEmpty1DefinicaoSentencaEstruturadaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAtribuicaoSentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AProcedureSentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AGotoSentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AEmptySentencaSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ASentencaAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ASentencaProcFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AParametrosReais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AEmptyParametrosReais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AUnicoDefinicaoParametrosReais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AMultiploDefinicaoParametrosReais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ACompostaSentencaEstruturada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AWhileSentencaEstruturada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AIfSentencaEstruturada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ACompostaSentencaEstruturadaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AWhileSentencaEstruturadaFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ASentencaWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce AEstruturadaSentencaWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ASentencaWhileFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ASentencaGoto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ASentencaIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce AElseSentencaIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce AIfSentencaIfFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ASentencaIfFechada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AAcessoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce AIndexadaAcessoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce AVariavelIndexada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce AUnicoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AMultiploExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce AExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce AEmptyExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce AUnicoComSinalExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce AUnicoSemSinalExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce AMultiploSemSinalExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce AMultiploComSinalExpressaoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AUnicoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce AMultiploTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce AConstanteSemSinalFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce AExpressaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce ANotFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce AFuncaoOuVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce AVarIndexadaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce AMenorOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce AMenorIgualOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce AMaiorOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce AMaiorIgualOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce AIgualOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce ADiferenteOperadorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce ASomaSubOperadorAditivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce AOrOperadorAditivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce AMultiplicacaoOperadorMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce ADivisaoOperadorMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce AAndOperadorMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ADivOperadorMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce AModOperadorMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ATerminal$Sinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSinal psinalNode1;
        psinalNode1 = (PSinal)nodeArrayList1.get(0);
	if(psinalNode1 != null)
	{
	  listNode2.add(psinalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce ANonTerminal$Sinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSinal psinalNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psinalNode2 = (PSinal)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psinalNode2 != null)
	{
	  listNode3.add(psinalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {13, SHIFT, 1}, },
			{{-1, ERROR, 1}, {27, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {28, SHIFT, 4}, {31, SHIFT, 5}, },
			{{-1, REDUCE, 11}, {16, SHIFT, 6}, },
			{{-1, ERROR, 5}, {27, SHIFT, 9}, },
			{{-1, ERROR, 6}, {38, SHIFT, 11}, },
			{{-1, ERROR, 7}, {29, SHIFT, 14}, },
			{{-1, REDUCE, 16}, {19, SHIFT, 15}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 10}, {32, SHIFT, 17}, {33, SHIFT, 18}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 12}, {28, SHIFT, 19}, {33, SHIFT, 20}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 15}, {27, SHIFT, 21}, },
			{{-1, REDUCE, 43}, {14, SHIFT, 24}, },
			{{-1, ERROR, 17}, {28, SHIFT, 26}, },
			{{-1, ERROR, 18}, {27, SHIFT, 27}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 20}, {38, SHIFT, 11}, },
			{{-1, ERROR, 21}, {44, SHIFT, 29}, },
			{{-1, ERROR, 22}, {28, SHIFT, 30}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 24}, {27, SHIFT, 9}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 34}, {17, SHIFT, 35}, },
			{{-1, REDUCE, 11}, {16, SHIFT, 6}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 29}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, {27, SHIFT, 47}, },
			{{-1, REDUCE, 15}, {27, SHIFT, 21}, },
			{{-1, ERROR, 31}, {33, SHIFT, 18}, {35, SHIFT, 51}, },
			{{-1, ERROR, 32}, {28, SHIFT, 52}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 34}, {27, SHIFT, 53}, },
			{{-1, ERROR, 35}, {27, SHIFT, 54}, },
			{{-1, ERROR, 36}, {11, SHIFT, 55}, },
			{{-1, REDUCE, 47}, {15, SHIFT, 34}, {17, SHIFT, 35}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 39}, {28, SHIFT, 58}, },
			{{-1, ERROR, 40}, {28, SHIFT, 59}, },
			{{-1, ERROR, 41}, {28, SHIFT, 60}, },
			{{-1, ERROR, 42}, {28, SHIFT, 61}, },
			{{-1, ERROR, 43}, {29, SHIFT, 62}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 51}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, {27, SHIFT, 47}, },
			{{-1, REDUCE, 42}, {27, SHIFT, 9}, },
			{{-1, REDUCE, 58}, {31, SHIFT, 65}, },
			{{-1, REDUCE, 58}, {31, SHIFT, 65}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 69}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 11}, {16, SHIFT, 6}, },
			{{-1, REDUCE, 11}, {16, SHIFT, 6}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 65}, {14, SHIFT, 89}, {27, SHIFT, 9}, },
			{{-1, ERROR, 66}, {35, SHIFT, 98}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 68}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 69}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 70}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 101}, {31, SHIFT, 118}, {34, REDUCE, 117}, {36, REDUCE, 117}, },
			{{-1, ERROR, 72}, {35, SHIFT, 120}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 74}, {12, SHIFT, 121}, {28, SHIFT, 122}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 85}, {34, SHIFT, 123}, {36, SHIFT, 124}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 89}, {27, SHIFT, 9}, },
			{{-1, ERROR, 90}, {33, SHIFT, 18}, {35, SHIFT, 126}, },
			{{-1, ERROR, 91}, {28, SHIFT, 127}, {32, SHIFT, 128}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 98}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, {27, SHIFT, 129}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 100}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {53, SHIFT, 105}, },
			{{-1, ERROR, 101}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 134}, },
			{{-1, ERROR, 109}, {36, SHIFT, 124}, },
			{{-1, REDUCE, 135}, {36, REDUCE, 118}, },
			{{-1, ERROR, 111}, {5, SHIFT, 134}, },
			{{-1, REDUCE, 124}, {23, SHIFT, 135}, {39, SHIFT, 136}, {40, SHIFT, 137}, {41, SHIFT, 138}, {42, SHIFT, 139}, {43, SHIFT, 140}, {44, SHIFT, 141}, {45, SHIFT, 103}, {46, SHIFT, 104}, },
			{{-1, REDUCE, 126}, {22, SHIFT, 146}, {24, SHIFT, 147}, {25, SHIFT, 148}, {47, SHIFT, 149}, {48, SHIFT, 150}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 115}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 116}, {18, SHIFT, 154}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 118}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 69}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 69}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, ERROR, 123}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 124}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 125}, {33, SHIFT, 18}, {35, SHIFT, 163}, },
			{{-1, ERROR, 126}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, {3, SHIFT, 164}, {27, SHIFT, 165}, },
			{{-1, ERROR, 127}, {14, SHIFT, 89}, {27, SHIFT, 9}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 133}, },
			{{-1, ERROR, 133}, {32, SHIFT, 170}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 171}, {7, SHIFT, 172}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 144}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 145}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, ERROR, 151}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 125}, {22, SHIFT, 146}, {24, SHIFT, 147}, {25, SHIFT, 148}, {47, SHIFT, 149}, {48, SHIFT, 150}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 69}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, ERROR, 155}, {32, SHIFT, 188}, {33, SHIFT, 189}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 161}, {33, SHIFT, 190}, {37, SHIFT, 191}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 163}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, {3, SHIFT, 164}, {27, SHIFT, 165}, },
			{{-1, ERROR, 164}, {36, SHIFT, 194}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 132}, },
			{{-1, ERROR, 171}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 172}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 173}, {35, SHIFT, 197}, },
			{{-1, REDUCE, 104}, {6, REDUCE, 107}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 81}, {6, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 181}, {6, SHIFT, 198}, },
			{{-1, REDUCE, 123}, {23, SHIFT, 135}, {45, SHIFT, 103}, {46, SHIFT, 104}, },
			{{-1, REDUCE, 127}, {22, SHIFT, 146}, {24, SHIFT, 147}, {25, SHIFT, 148}, {47, SHIFT, 149}, {48, SHIFT, 150}, },
			{{-1, ERROR, 184}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 189}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, ERROR, 190}, {21, SHIFT, 99}, {26, SHIFT, 100}, {27, SHIFT, 71}, {31, SHIFT, 101}, {38, SHIFT, 102}, {45, SHIFT, 103}, {46, SHIFT, 104}, {53, SHIFT, 105}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 194}, {27, SHIFT, 202}, },
			{{-1, ERROR, 195}, {5, SHIFT, 205}, },
			{{-1, ERROR, 196}, {18, SHIFT, 206}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 172}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 69}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 128}, {22, SHIFT, 146}, {24, SHIFT, 147}, {25, SHIFT, 148}, {47, SHIFT, 149}, {48, SHIFT, 150}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 202}, {30, SHIFT, 209}, },
			{{-1, ERROR, 203}, {28, SHIFT, 210}, {37, SHIFT, 211}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 171}, {7, SHIFT, 172}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 68}, {7, SHIFT, 172}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 209}, {27, SHIFT, 215}, },
			{{-1, ERROR, 210}, {27, SHIFT, 202}, },
			{{-1, ERROR, 211}, {10, SHIFT, 217}, },
			{{-1, ERROR, 212}, {6, SHIFT, 218}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 109}, {6, REDUCE, 86}, },
			{{-1, ERROR, 215}, {35, SHIFT, 219}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 217}, {31, SHIFT, 220}, },
			{{-1, REDUCE, 97}, {4, SHIFT, 171}, {7, SHIFT, 172}, {11, SHIFT, 55}, {20, SHIFT, 70}, {27, SHIFT, 71}, {38, SHIFT, 11}, },
			{{-1, ERROR, 219}, {0, SHIFT, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, },
			{{-1, ERROR, 220}, {3, SHIFT, 164}, {27, SHIFT, 223}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 225}, {32, SHIFT, 226}, },
			{{-1, REDUCE, 70}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {26, 43}, {60, 87}, {61, 88}, },
			{{-1, 31}, {5, 10}, {65, 90}, {89, 125}, {127, 90}, },
			{{-1, 48}, {98, 130}, {126, 166}, {163, 166}, {219, 222}, },
			{{-1, 167}, {163, 192}, },
			{{-1, 8}, },
			{{-1, 12}, },
			{{-1, 72}, {6, 13}, {20, 28}, {70, 117}, {134, 173}, {205, 173}, {206, 173}, {218, 173}, },
			{{-1, 16}, },
			{{-1, 22}, },
			{{-1, 23}, {30, 50}, },
			{{-1, 49}, {51, 63}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 106}, {112, 142}, {115, 152}, {182, 142}, {184, 152}, },
			{{-1, -1}, },
			{{-1, 107}, },
			{{-1, 25}, },
			{{-1, 32}, },
			{{-1, 33}, {52, 64}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, {37, 57}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 66}, {54, 67}, },
			{{-1, 91}, },
			{{-1, 92}, {127, 169}, },
			{{-1, 93}, },
			{{-1, 94}, },
			{{-1, 95}, },
			{{-1, 96}, },
			{{-1, 97}, },
			{{-1, 168}, {163, 193}, {220, 224}, },
			{{-1, 203}, },
			{{-1, 204}, {210, 216}, },
			{{-1, 225}, },
			{{-1, 131}, },
			{{-1, 73}, {36, 56}, {134, 174}, {197, 174}, {205, 174}, {206, 174}, {218, 174}, },
			{{-1, 74}, },
			{{-1, 175}, {55, 75}, {122, 159}, {198, 208}, {218, 208}, },
			{{-1, -1}, },
			{{-1, 176}, {206, 213}, },
			{{-1, 76}, {134, 177}, {154, 186}, {205, 177}, {206, 214}, {218, 177}, },
			{{-1, 77}, {154, 187}, {206, 187}, },
			{{-1, 178}, },
			{{-1, 78}, {120, 157}, {197, 157}, },
			{{-1, 79}, },
			{{-1, 108}, {55, 80}, {120, 80}, {122, 80}, {134, 80}, {154, 80}, {197, 80}, {198, 80}, {205, 80}, {206, 80}, {218, 80}, },
			{{-1, 119}, },
			{{-1, 155}, },
			{{-1, 81}, {120, 158}, {197, 158}, },
			{{-1, 179}, {197, 207}, },
			{{-1, 82}, },
			{{-1, 180}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 181}, {205, 212}, {218, 221}, },
			{{-1, 109}, {55, 85}, {120, 85}, {122, 85}, {134, 85}, {154, 85}, {197, 85}, {198, 85}, {205, 85}, {206, 85}, {218, 85}, },
			{{-1, 110}, {55, 86}, {120, 86}, {122, 86}, {134, 86}, {154, 86}, {197, 86}, {198, 86}, {205, 86}, {206, 86}, {218, 86}, },
			{{-1, 161}, },
			{{-1, 111}, {69, 116}, {101, 133}, {118, 156}, {123, 160}, {124, 162}, {171, 195}, {172, 196}, {189, 200}, {190, 201}, },
			{{-1, 143}, },
			{{-1, 112}, {144, 182}, },
			{{-1, 113}, {115, 153}, {145, 183}, {184, 199}, },
			{{-1, 114}, {100, 132}, {151, 185}, },
			{{-1, 144}, },
			{{-1, 145}, },
			{{-1, 151}, },
			{{-1, 115}, {145, 184}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: program",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';', '('",
			"expecting: begin, var, function, label, procedure, type",
			"expecting: const inteiro",
			"expecting: '.'",
			"expecting: begin, var, function, procedure, type",
			"expecting: ')', ',', ':'",
			"expecting: ')', ','",
			"expecting: else, end, ';', ',', ':'",
			"expecting: ';', ','",
			"expecting: begin, var, function, procedure",
			"expecting: ';'",
			"expecting: '='",
			"expecting: begin, function, procedure",
			"expecting: integer, string, boolean, identificador",
			"expecting: begin, var, function, procedure, identificador",
			"expecting: ',', ':'",
			"expecting: begin",
			"expecting: ';', ')', ']'",
			"expecting: begin, function, procedure, identificador",
			"expecting: '(', ':'",
			"expecting: if, while, begin, end, goto, identificador, ';', const inteiro",
			"expecting: ';', '.'",
			"expecting: var, identificador",
			"expecting: ':'",
			"expecting: const booleana, not, identificador, '(', const inteiro, '+', '-', const string",
			"expecting: then, else, end, do, and, or, div, mod, ';', '(', ')', ',', ':=', '[', ']', '<', '<=', '>', '>=', '<>', '=', '+', '-', '*', '/'",
			"expecting: end, ';'",
			"expecting: else, end, ';'",
			"expecting: ':=', '['",
			"expecting: ';', ')'",
			"expecting: then, else, end, do, and, or, div, mod, ';', ')', ',', ']', '<', '<=', '>', '>=', '<>', '=', '+', '-', '*', '/'",
			"expecting: const booleana, not, identificador, '(', const inteiro, const string",
			"expecting: '['",
			"expecting: then, else, end, do, and, or, div, mod, ';', ')', ',', '[', ']', '<', '<=', '>', '>=', '<>', '=', '+', '-', '*', '/'",
			"expecting: then",
			"expecting: then, else, end, do, or, ';', ')', ',', ']', '<', '<=', '>', '>=', '<>', '=', '+', '-'",
			"expecting: do",
			"expecting: if, while, begin, end, goto, identificador, ';'",
			"expecting: else, end, ';', '.'",
			"expecting: integer, string, boolean, array, identificador",
			"expecting: ';', ':'",
			"expecting: ')'",
			"expecting: if, else, while, begin, end, goto, identificador, ';', const inteiro",
			"expecting: then, else, end, do, ';', ')', ',', ']'",
			"expecting: ',', ']'",
			"expecting: else",
			"expecting: then, else, end, do, or, ';', ')', ',', ']', '+', '-'",
			"expecting: then, else, end, do, and, or, div, mod, ';', ')', ',', ':=', '[', ']', '<', '<=', '>', '>=', '<>', '=', '+', '-', '*', '/'",
			"expecting: if, else, while, begin, end, goto, identificador, ';'",
			"expecting: '..'",
			"expecting: ';', ']'",
			"expecting: of",
			"expecting: '('",
			"expecting: integer, string, boolean",
			"expecting: array, identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 11, 2, 1, 12, 13, 1, 7, 5, 14, 13, 13, 1, 15, 4, 8, 11, 16, 17, 18, 13, 13, 1, 1, 19, 15, 15, 13, 13, 13, 13, 6, 20, 20, 20, 13, 13, 13, 13, 16, 21, 22, 3, 23, 24, 15, 15, 15, 4, 4, 2, 13, 13, 25, 26, 13, 27, 27, 5, 28, 26, 29, 29, 29, 29, 29, 30, 30, 30, 29, 29, 30, 29, 31, 31, 13, 13, 1, 18, 32, 32, 32, 32, 32, 32, 32, 16, 33, 34, 27, 33, 27, 27, 33, 27, 33, 33, 35, 36, 37, 38, 33, 33, 27, 39, 30, 27, 33, 40, 41, 23, 27, 27, 18, 42, 25, 43, 13, 13, 13, 33, 44, 45, 27, 27, 27, 27, 27, 27, 27, 27, 46, 27, 27, 34, 34, 34, 34, 34, 34, 27, 33, 23, 9, 9, 30, 29, 29, 30, 47, 47, 42, 35, 32, 32, 32, 32, 32, 33, 27, 27, 26, 30, 29, 48, 30, 48, 48, 48, 48, 49, 33, 27, 33, 29, 29, 33, 27, 27, 50, 32, 32, 1, 37, 39, 51, 23, 33, 9, 47, 52, 53, 53, 45, 45, 48, 29, 1, 1, 54, 48, 48, 30, 26, 53, 55, 45, 56, 57, 48, 53, 44, 44, 44, 32, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
