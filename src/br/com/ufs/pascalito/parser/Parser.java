/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.parser;

import br.com.ufs.pascalito.lexer.*;
import br.com.ufs.pascalito.node.*;
import br.com.ufs.pascalito.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AUnicoCabecalhoPrograma */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AMultiploCabecalhoPrograma */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ABloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AUnicoIdentificadores */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AMultiploIdentificadores */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ADeclaracaoLabels */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AEmptyDeclaracaoLabels */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AUnicoLabels */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AMultiploLabels */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ALabel */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ADeclaracaoTipos */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AEmptyDeclaracaoTipos */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AUnicoDefinicaoTipos */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AMultiploDefinicaoTipos */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AExistenteDenotadorTipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce ANovoDenotadorTipo */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AIntegerDenotadorTipo */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AStringDenotadorTipo */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce ARealDenotadorTipo */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce ABooleanDenotadorTipo */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AOrdinalNovoTipo */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AArrayNovoTipo */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ATipoArray */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AUnicoTiposOrdinais */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AMultiploTiposOrdinais */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce ANovoTipoOrdinal */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce AExistenteTipoOrdinal */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AEnumeradoNovoTipoOrdinal */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list, false);
            }
            break;
            case 29: /* reduce ASubrangeNovoTipoOrdinal */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce ATipoEnumerado */
            {
                ArrayList<Object> list = new30();
                push(goTo(15), list, false);
            }
            break;
            case 31: /* reduce ATipoSubrange */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce AInteiroConstante */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list, false);
            }
            break;
            case 33: /* reduce AStringConstante */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list, false);
            }
            break;
            case 34: /* reduce ADeclaracoesVariaveis */
            {
                ArrayList<Object> list = new34();
                push(goTo(18), list, false);
            }
            break;
            case 35: /* reduce AEmptyDeclaracoesVariaveis */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list, false);
            }
            break;
            case 36: /* reduce AUnicoDeclaracaoVariaveis */
            {
                ArrayList<Object> list = new36();
                push(goTo(19), list, false);
            }
            break;
            case 37: /* reduce AMultiploDeclaracaoVariaveis */
            {
                ArrayList<Object> list = new37();
                push(goTo(19), list, false);
            }
            break;
            case 38: /* reduce ADeclaracaoVariavel */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PCabecalhoPrograma pcabecalhoprogramaNode2;
        TPontoEVirgula tpontoevirgulaNode3;
        PBloco pblocoNode4;
        TPonto tpontoNode5;
        pcabecalhoprogramaNode2 = (PCabecalhoPrograma)nodeArrayList1.get(0);
        tpontoevirgulaNode3 = (TPontoEVirgula)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);
        tpontoNode5 = (TPonto)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(pcabecalhoprogramaNode2, tpontoevirgulaNode3, pblocoNode4, tpontoNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AUnicoCabecalhoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCabecalhoPrograma pcabecalhoprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentificador tidentificadorNode3;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);

        pcabecalhoprogramaNode1 = new AUnicoCabecalhoPrograma(tprogramNode2, tidentificadorNode3);
        }
	nodeList.add(pcabecalhoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultiploCabecalhoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCabecalhoPrograma pcabecalhoprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentificador tidentificadorNode3;
        TAbreParenteses tabreparentesesNode4;
        PIdentificadores pidentificadoresNode5;
        TFechaParenteses tfechaparentesesNode6;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        tabreparentesesNode4 = (TAbreParenteses)nodeArrayList3.get(0);
        pidentificadoresNode5 = (PIdentificadores)nodeArrayList4.get(0);
        tfechaparentesesNode6 = (TFechaParenteses)nodeArrayList5.get(0);

        pcabecalhoprogramaNode1 = new AMultiploCabecalhoPrograma(tprogramNode2, tidentificadorNode3, tabreparentesesNode4, pidentificadoresNode5, tfechaparentesesNode6);
        }
	nodeList.add(pcabecalhoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ABloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        PDeclaracaoLabels pdeclaracaolabelsNode2;
        PDeclaracaoTipos pdeclaracaotiposNode3;
        PDeclaracoesVariaveis pdeclaracoesvariaveisNode4;
        pdeclaracaolabelsNode2 = (PDeclaracaoLabels)nodeArrayList1.get(0);
        pdeclaracaotiposNode3 = (PDeclaracaoTipos)nodeArrayList2.get(0);
        pdeclaracoesvariaveisNode4 = (PDeclaracoesVariaveis)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(pdeclaracaolabelsNode2, pdeclaracaotiposNode3, pdeclaracoesvariaveisNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AUnicoIdentificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentificadores pidentificadoresNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pidentificadoresNode1 = new AUnicoIdentificadores(tidentificadorNode2);
        }
	nodeList.add(pidentificadoresNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMultiploIdentificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentificadores pidentificadoresNode1;
        {
            // Block
        PIdentificadores pidentificadoresNode2;
        TVirgula tvirgulaNode3;
        TIdentificador tidentificadorNode4;
        pidentificadoresNode2 = (PIdentificadores)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        tidentificadorNode4 = (TIdentificador)nodeArrayList3.get(0);

        pidentificadoresNode1 = new AMultiploIdentificadores(pidentificadoresNode2, tvirgulaNode3, tidentificadorNode4);
        }
	nodeList.add(pidentificadoresNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADeclaracaoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoLabels pdeclaracaolabelsNode1;
        {
            // Block
        TLabel tlabelNode2;
        PLabels plabelsNode3;
        TPontoEVirgula tpontoevirgulaNode4;
        tlabelNode2 = (TLabel)nodeArrayList1.get(0);
        plabelsNode3 = (PLabels)nodeArrayList2.get(0);
        tpontoevirgulaNode4 = (TPontoEVirgula)nodeArrayList3.get(0);

        pdeclaracaolabelsNode1 = new ADeclaracaoLabels(tlabelNode2, plabelsNode3, tpontoevirgulaNode4);
        }
	nodeList.add(pdeclaracaolabelsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEmptyDeclaracaoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracaoLabels pdeclaracaolabelsNode1;
        {
            // Block

        pdeclaracaolabelsNode1 = new AEmptyDeclaracaoLabels();
        }
	nodeList.add(pdeclaracaolabelsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AUnicoLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLabels plabelsNode1;
        {
            // Block
        PLabel plabelNode2;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);

        plabelsNode1 = new AUnicoLabels(plabelNode2);
        }
	nodeList.add(plabelsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMultiploLabels */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLabels plabelsNode1;
        {
            // Block
        PLabels plabelsNode2;
        TVirgula tvirgulaNode3;
        PLabel plabelNode4;
        plabelsNode2 = (PLabels)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        plabelsNode1 = new AMultiploLabels(plabelsNode2, tvirgulaNode3, plabelNode4);
        }
	nodeList.add(plabelsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLabel plabelNode1;
        {
            // Block
        TConstInteiro tconstinteiroNode2;
        tconstinteiroNode2 = (TConstInteiro)nodeArrayList1.get(0);

        plabelNode1 = new ALabel(tconstinteiroNode2);
        }
	nodeList.add(plabelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADeclaracaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoTipos pdeclaracaotiposNode1;
        {
            // Block
        TType ttypeNode2;
        PDefinicaoTipos pdefinicaotiposNode3;
        TPontoEVirgula tpontoevirgulaNode4;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        pdefinicaotiposNode3 = (PDefinicaoTipos)nodeArrayList2.get(0);
        tpontoevirgulaNode4 = (TPontoEVirgula)nodeArrayList3.get(0);

        pdeclaracaotiposNode1 = new ADeclaracaoTipos(ttypeNode2, pdefinicaotiposNode3, tpontoevirgulaNode4);
        }
	nodeList.add(pdeclaracaotiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AEmptyDeclaracaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracaoTipos pdeclaracaotiposNode1;
        {
            // Block

        pdeclaracaotiposNode1 = new AEmptyDeclaracaoTipos();
        }
	nodeList.add(pdeclaracaotiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AUnicoDefinicaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefinicaoTipos pdefinicaotiposNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TIgual tigualNode3;
        PDenotadorTipo pdenotadortipoNode4;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        pdenotadortipoNode4 = (PDenotadorTipo)nodeArrayList3.get(0);

        pdefinicaotiposNode1 = new AUnicoDefinicaoTipos(tidentificadorNode2, tigualNode3, pdenotadortipoNode4);
        }
	nodeList.add(pdefinicaotiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMultiploDefinicaoTipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefinicaoTipos pdefinicaotiposNode1;
        {
            // Block
        PDefinicaoTipos pdefinicaotiposNode2;
        TVirgula tvirgulaNode3;
        PDenotadorTipo pdenotadortipoNode4;
        pdefinicaotiposNode2 = (PDefinicaoTipos)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pdenotadortipoNode4 = (PDenotadorTipo)nodeArrayList3.get(0);

        pdefinicaotiposNode1 = new AMultiploDefinicaoTipos(pdefinicaotiposNode2, tvirgulaNode3, pdenotadortipoNode4);
        }
	nodeList.add(pdefinicaotiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExistenteDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new AExistenteDenotadorTipo(tidentificadorNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANovoDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        PNovoTipo pnovotipoNode2;
        pnovotipoNode2 = (PNovoTipo)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new ANovoDenotadorTipo(pnovotipoNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIntegerDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new AIntegerDenotadorTipo(tintegerNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AStringDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new AStringDenotadorTipo(tstringNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ARealDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new ARealDenotadorTipo(trealNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABooleanDenotadorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDenotadorTipo pdenotadortipoNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pdenotadortipoNode1 = new ABooleanDenotadorTipo(tbooleanNode2);
        }
	nodeList.add(pdenotadortipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AOrdinalNovoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNovoTipo pnovotipoNode1;
        {
            // Block
        PNovoTipoOrdinal pnovotipoordinalNode2;
        pnovotipoordinalNode2 = (PNovoTipoOrdinal)nodeArrayList1.get(0);

        pnovotipoNode1 = new AOrdinalNovoTipo(pnovotipoordinalNode2);
        }
	nodeList.add(pnovotipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AArrayNovoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNovoTipo pnovotipoNode1;
        {
            // Block
        PTipoArray ptipoarrayNode2;
        ptipoarrayNode2 = (PTipoArray)nodeArrayList1.get(0);

        pnovotipoNode1 = new AArrayNovoTipo(ptipoarrayNode2);
        }
	nodeList.add(pnovotipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATipoArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoArray ptipoarrayNode1;
        {
            // Block
        TArray tarrayNode2;
        TAbreColchete tabrecolcheteNode3;
        PTiposOrdinais ptiposordinaisNode4;
        TFechaColchete tfechacolcheteNode5;
        TOf tofNode6;
        PDenotadorTipo pdenotadortipoNode7;
        tarrayNode2 = (TArray)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbreColchete)nodeArrayList2.get(0);
        ptiposordinaisNode4 = (PTiposOrdinais)nodeArrayList3.get(0);
        tfechacolcheteNode5 = (TFechaColchete)nodeArrayList4.get(0);
        tofNode6 = (TOf)nodeArrayList5.get(0);
        pdenotadortipoNode7 = (PDenotadorTipo)nodeArrayList6.get(0);

        ptipoarrayNode1 = new ATipoArray(tarrayNode2, tabrecolcheteNode3, ptiposordinaisNode4, tfechacolcheteNode5, tofNode6, pdenotadortipoNode7);
        }
	nodeList.add(ptipoarrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AUnicoTiposOrdinais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTiposOrdinais ptiposordinaisNode1;
        {
            // Block
        PTipoOrdinal ptipoordinalNode2;
        ptipoordinalNode2 = (PTipoOrdinal)nodeArrayList1.get(0);

        ptiposordinaisNode1 = new AUnicoTiposOrdinais(ptipoordinalNode2);
        }
	nodeList.add(ptiposordinaisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMultiploTiposOrdinais */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTiposOrdinais ptiposordinaisNode1;
        {
            // Block
        PTiposOrdinais ptiposordinaisNode2;
        TVirgula tvirgulaNode3;
        PTipoOrdinal ptipoordinalNode4;
        ptiposordinaisNode2 = (PTiposOrdinais)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        ptipoordinalNode4 = (PTipoOrdinal)nodeArrayList3.get(0);

        ptiposordinaisNode1 = new AMultiploTiposOrdinais(ptiposordinaisNode2, tvirgulaNode3, ptipoordinalNode4);
        }
	nodeList.add(ptiposordinaisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoOrdinal ptipoordinalNode1;
        {
            // Block
        PNovoTipoOrdinal pnovotipoordinalNode2;
        pnovotipoordinalNode2 = (PNovoTipoOrdinal)nodeArrayList1.get(0);

        ptipoordinalNode1 = new ANovoTipoOrdinal(pnovotipoordinalNode2);
        }
	nodeList.add(ptipoordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExistenteTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoOrdinal ptipoordinalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        ptipoordinalNode1 = new AExistenteTipoOrdinal(tidentificadorNode2);
        }
	nodeList.add(ptipoordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEnumeradoNovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNovoTipoOrdinal pnovotipoordinalNode1;
        {
            // Block
        PTipoEnumerado ptipoenumeradoNode2;
        ptipoenumeradoNode2 = (PTipoEnumerado)nodeArrayList1.get(0);

        pnovotipoordinalNode1 = new AEnumeradoNovoTipoOrdinal(ptipoenumeradoNode2);
        }
	nodeList.add(pnovotipoordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASubrangeNovoTipoOrdinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNovoTipoOrdinal pnovotipoordinalNode1;
        {
            // Block
        PTipoSubrange ptiposubrangeNode2;
        ptiposubrangeNode2 = (PTipoSubrange)nodeArrayList1.get(0);

        pnovotipoordinalNode1 = new ASubrangeNovoTipoOrdinal(ptiposubrangeNode2);
        }
	nodeList.add(pnovotipoordinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATipoEnumerado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoEnumerado ptipoenumeradoNode1;
        {
            // Block
        TAbreParenteses tabreparentesesNode2;
        PIdentificadores pidentificadoresNode3;
        TFechaParenteses tfechaparentesesNode4;
        tabreparentesesNode2 = (TAbreParenteses)nodeArrayList1.get(0);
        pidentificadoresNode3 = (PIdentificadores)nodeArrayList2.get(0);
        tfechaparentesesNode4 = (TFechaParenteses)nodeArrayList3.get(0);

        ptipoenumeradoNode1 = new ATipoEnumerado(tabreparentesesNode2, pidentificadoresNode3, tfechaparentesesNode4);
        }
	nodeList.add(ptipoenumeradoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATipoSubrange */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoSubrange ptiposubrangeNode1;
        {
            // Block
        PConstante pconstanteNode2;
        TPontoPonto tpontopontoNode3;
        PConstante pconstanteNode4;
        pconstanteNode2 = (PConstante)nodeArrayList1.get(0);
        tpontopontoNode3 = (TPontoPonto)nodeArrayList2.get(0);
        pconstanteNode4 = (PConstante)nodeArrayList3.get(0);

        ptiposubrangeNode1 = new ATipoSubrange(pconstanteNode2, tpontopontoNode3, pconstanteNode4);
        }
	nodeList.add(ptiposubrangeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInteiroConstante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstInteiro tconstinteiroNode2;
        tconstinteiroNode2 = (TConstInteiro)nodeArrayList1.get(0);

        pconstanteNode1 = new AInteiroConstante(tconstinteiroNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AStringConstante */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstante pconstanteNode1;
        {
            // Block
        TConstString tconststringNode2;
        tconststringNode2 = (TConstString)nodeArrayList1.get(0);

        pconstanteNode1 = new AStringConstante(tconststringNode2);
        }
	nodeList.add(pconstanteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADeclaracoesVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoesVariaveis pdeclaracoesvariaveisNode1;
        {
            // Block
        TVar tvarNode2;
        PDeclaracaoVariaveis pdeclaracaovariaveisNode3;
        TPontoEVirgula tpontoevirgulaNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pdeclaracaovariaveisNode3 = (PDeclaracaoVariaveis)nodeArrayList2.get(0);
        tpontoevirgulaNode4 = (TPontoEVirgula)nodeArrayList3.get(0);

        pdeclaracoesvariaveisNode1 = new ADeclaracoesVariaveis(tvarNode2, pdeclaracaovariaveisNode3, tpontoevirgulaNode4);
        }
	nodeList.add(pdeclaracoesvariaveisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AEmptyDeclaracoesVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracoesVariaveis pdeclaracoesvariaveisNode1;
        {
            // Block

        pdeclaracoesvariaveisNode1 = new AEmptyDeclaracoesVariaveis();
        }
	nodeList.add(pdeclaracoesvariaveisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AUnicoDeclaracaoVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariaveis pdeclaracaovariaveisNode1;
        {
            // Block
        PDeclaracaoVariavel pdeclaracaovariavelNode2;
        pdeclaracaovariavelNode2 = (PDeclaracaoVariavel)nodeArrayList1.get(0);

        pdeclaracaovariaveisNode1 = new AUnicoDeclaracaoVariaveis(pdeclaracaovariavelNode2);
        }
	nodeList.add(pdeclaracaovariaveisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMultiploDeclaracaoVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariaveis pdeclaracaovariaveisNode1;
        {
            // Block
        PDeclaracaoVariaveis pdeclaracaovariaveisNode2;
        TPontoEVirgula tpontoevirgulaNode3;
        PDeclaracaoVariavel pdeclaracaovariavelNode4;
        pdeclaracaovariaveisNode2 = (PDeclaracaoVariaveis)nodeArrayList1.get(0);
        tpontoevirgulaNode3 = (TPontoEVirgula)nodeArrayList2.get(0);
        pdeclaracaovariavelNode4 = (PDeclaracaoVariavel)nodeArrayList3.get(0);

        pdeclaracaovariaveisNode1 = new AMultiploDeclaracaoVariaveis(pdeclaracaovariaveisNode2, tpontoevirgulaNode3, pdeclaracaovariavelNode4);
        }
	nodeList.add(pdeclaracaovariaveisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ADeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PIdentificadores pidentificadoresNode2;
        TDoisPontos tdoispontosNode3;
        PDenotadorTipo pdenotadortipoNode4;
        pidentificadoresNode2 = (PIdentificadores)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        pdenotadortipoNode4 = (PDenotadorTipo)nodeArrayList3.get(0);

        pdeclaracaovariavelNode1 = new ADeclaracaoVariavel(pidentificadoresNode2, tdoispontosNode3, pdenotadortipoNode4);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {14, SHIFT, 1}, },
			{{-1, ERROR, 1}, {22, SHIFT, 4}, },
			{{-1, ERROR, 2}, {44, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {23, SHIFT, 5}, },
			{{-1, REDUCE, 1}, {26, SHIFT, 6}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 7}, },
			{{-1, ERROR, 6}, {22, SHIFT, 10}, },
			{{-1, ERROR, 7}, {33, SHIFT, 12}, },
			{{-1, ERROR, 8}, {24, SHIFT, 15}, },
			{{-1, REDUCE, 12}, {20, SHIFT, 16}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 11}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 13}, {23, SHIFT, 20}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 16}, {22, SHIFT, 22}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 24}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 19}, {22, SHIFT, 26}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 21}, {33, SHIFT, 12}, },
			{{-1, ERROR, 22}, {37, SHIFT, 28}, },
			{{-1, ERROR, 23}, {23, SHIFT, 29}, {28, SHIFT, 30}, },
			{{-1, ERROR, 24}, {22, SHIFT, 10}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 28}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, {22, SHIFT, 39}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 30}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, {22, SHIFT, 39}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, ERROR, 31}, {28, SHIFT, 19}, {30, SHIFT, 51}, },
			{{-1, ERROR, 32}, {23, SHIFT, 52}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 38}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 40}, {22, SHIFT, 10}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 49}, {25, SHIFT, 55}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 51}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, {22, SHIFT, 39}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, REDUCE, 34}, {22, SHIFT, 10}, },
			{{-1, ERROR, 53}, {22, SHIFT, 58}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, ERROR, 54}, {27, SHIFT, 62}, {28, SHIFT, 19}, },
			{{-1, ERROR, 55}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 59}, {28, SHIFT, 64}, {32, SHIFT, 65}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 64}, {22, SHIFT, 58}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, ERROR, 65}, {11, SHIFT, 67}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 67}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, {22, SHIFT, 39}, {26, SHIFT, 40}, {33, SHIFT, 41}, {35, SHIFT, 42}, },
			{{-1, REDUCE, 23}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 8}, },
			{{-1, 31}, {6, 11}, {40, 54}, },
			{{-1, 9}, },
			{{-1, 13}, },
			{{-1, 14}, {21, 27}, },
			{{-1, 17}, },
			{{-1, 23}, },
			{{-1, 43}, {30, 50}, {51, 56}, {67, 68}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 59}, },
			{{-1, 60}, {64, 66}, },
			{{-1, 46}, {53, 61}, {64, 61}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 49}, {55, 63}, },
			{{-1, 25}, },
			{{-1, 32}, },
			{{-1, 33}, {52, 57}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: program",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: ';', '('",
			"expecting: var, label, type, '.'",
			"expecting: const inteiro",
			"expecting: '.'",
			"expecting: var, type, '.'",
			"expecting: ')', ',', ':'",
			"expecting: ')', ','",
			"expecting: ';', ','",
			"expecting: var, '.'",
			"expecting: '='",
			"expecting: integer, string, real, boolean, array, identificador, '(', const inteiro, const string",
			"expecting: ',', ':'",
			"expecting: '['",
			"expecting: ';', '..', ',', ']'",
			"expecting: ';', ',', ']'",
			"expecting: '..'",
			"expecting: identificador, '.'",
			"expecting: identificador, '(', const inteiro, const string",
			"expecting: const inteiro, const string",
			"expecting: ',', ']'",
			"expecting: of",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10, 11, 11, 11, 2, 1, 12, 3, 1, 8, 6, 13, 11, 1, 7, 9, 11, 14, 12, 14, 15, 3, 3, 11, 11, 11, 11, 16, 11, 1, 17, 17, 11, 11, 11, 11, 18, 18, 19, 11, 14, 20, 21, 10, 22, 3, 3, 23, 23, 23, 23, 18, 18, 21, 24, 23, 14, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
