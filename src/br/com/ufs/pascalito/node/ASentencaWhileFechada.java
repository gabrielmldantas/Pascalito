/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class ASentencaWhileFechada extends PSentencaWhileFechada
{
    private TWhile _while_;
    private PExpressao _expressao_;
    private TDo _do_;
    private PDefinicaoSentencaFechada _definicaoSentencaFechada_;

    public ASentencaWhileFechada()
    {
        // Constructor
    }

    public ASentencaWhileFechada(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExpressao _expressao_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PDefinicaoSentencaFechada _definicaoSentencaFechada_)
    {
        // Constructor
        setWhile(_while_);

        setExpressao(_expressao_);

        setDo(_do_);

        setDefinicaoSentencaFechada(_definicaoSentencaFechada_);

    }

    @Override
    public Object clone()
    {
        return new ASentencaWhileFechada(
            cloneNode(this._while_),
            cloneNode(this._expressao_),
            cloneNode(this._do_),
            cloneNode(this._definicaoSentencaFechada_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASentencaWhileFechada(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExpressao getExpressao()
    {
        return this._expressao_;
    }

    public void setExpressao(PExpressao node)
    {
        if(this._expressao_ != null)
        {
            this._expressao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressao_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PDefinicaoSentencaFechada getDefinicaoSentencaFechada()
    {
        return this._definicaoSentencaFechada_;
    }

    public void setDefinicaoSentencaFechada(PDefinicaoSentencaFechada node)
    {
        if(this._definicaoSentencaFechada_ != null)
        {
            this._definicaoSentencaFechada_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._definicaoSentencaFechada_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._expressao_)
            + toString(this._do_)
            + toString(this._definicaoSentencaFechada_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._expressao_ == child)
        {
            this._expressao_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._definicaoSentencaFechada_ == child)
        {
            this._definicaoSentencaFechada_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._expressao_ == oldChild)
        {
            setExpressao((PExpressao) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._definicaoSentencaFechada_ == oldChild)
        {
            setDefinicaoSentencaFechada((PDefinicaoSentencaFechada) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
