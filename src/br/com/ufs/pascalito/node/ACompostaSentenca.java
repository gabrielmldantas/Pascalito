/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import java.util.*;
import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class ACompostaSentenca extends PSentenca
{
    private PNumeroSemSinal _numeroSemSinal_;
    private final LinkedList<PSentenca> _sentenca_ = new LinkedList<PSentenca>();

    public ACompostaSentenca()
    {
        // Constructor
    }

    public ACompostaSentenca(
        @SuppressWarnings("hiding") PNumeroSemSinal _numeroSemSinal_,
        @SuppressWarnings("hiding") List<?> _sentenca_)
    {
        // Constructor
        setNumeroSemSinal(_numeroSemSinal_);

        setSentenca(_sentenca_);

    }

    @Override
    public Object clone()
    {
        return new ACompostaSentenca(
            cloneNode(this._numeroSemSinal_),
            cloneList(this._sentenca_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompostaSentenca(this);
    }

    public PNumeroSemSinal getNumeroSemSinal()
    {
        return this._numeroSemSinal_;
    }

    public void setNumeroSemSinal(PNumeroSemSinal node)
    {
        if(this._numeroSemSinal_ != null)
        {
            this._numeroSemSinal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numeroSemSinal_ = node;
    }

    public LinkedList<PSentenca> getSentenca()
    {
        return this._sentenca_;
    }

    public void setSentenca(List<?> list)
    {
        for(PSentenca e : this._sentenca_)
        {
            e.parent(null);
        }
        this._sentenca_.clear();

        for(Object obj_e : list)
        {
            PSentenca e = (PSentenca) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._sentenca_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numeroSemSinal_)
            + toString(this._sentenca_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numeroSemSinal_ == child)
        {
            this._numeroSemSinal_ = null;
            return;
        }

        if(this._sentenca_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numeroSemSinal_ == oldChild)
        {
            setNumeroSemSinal((PNumeroSemSinal) newChild);
            return;
        }

        for(ListIterator<PSentenca> i = this._sentenca_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSentenca) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
