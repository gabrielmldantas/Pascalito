/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class AGotoSentenca extends PSentenca
{
    private PNumeroSemSinal _label_;
    private PNumeroSemSinal _jump_;

    public AGotoSentenca()
    {
        // Constructor
    }

    public AGotoSentenca(
        @SuppressWarnings("hiding") PNumeroSemSinal _label_,
        @SuppressWarnings("hiding") PNumeroSemSinal _jump_)
    {
        // Constructor
        setLabel(_label_);

        setJump(_jump_);

    }

    @Override
    public Object clone()
    {
        return new AGotoSentenca(
            cloneNode(this._label_),
            cloneNode(this._jump_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGotoSentenca(this);
    }

    public PNumeroSemSinal getLabel()
    {
        return this._label_;
    }

    public void setLabel(PNumeroSemSinal node)
    {
        if(this._label_ != null)
        {
            this._label_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._label_ = node;
    }

    public PNumeroSemSinal getJump()
    {
        return this._jump_;
    }

    public void setJump(PNumeroSemSinal node)
    {
        if(this._jump_ != null)
        {
            this._jump_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._jump_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._label_)
            + toString(this._jump_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._label_ == child)
        {
            this._label_ = null;
            return;
        }

        if(this._jump_ == child)
        {
            this._jump_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._label_ == oldChild)
        {
            setLabel((PNumeroSemSinal) newChild);
            return;
        }

        if(this._jump_ == oldChild)
        {
            setJump((PNumeroSemSinal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
