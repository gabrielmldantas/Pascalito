/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import java.util.*;
import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class AValorParametroFormal extends PParametroFormal
{
    private final LinkedList<PValorFormal> _valorFormal_ = new LinkedList<PValorFormal>();

    public AValorParametroFormal()
    {
        // Constructor
    }

    public AValorParametroFormal(
        @SuppressWarnings("hiding") List<?> _valorFormal_)
    {
        // Constructor
        setValorFormal(_valorFormal_);

    }

    @Override
    public Object clone()
    {
        return new AValorParametroFormal(
            cloneList(this._valorFormal_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAValorParametroFormal(this);
    }

    public LinkedList<PValorFormal> getValorFormal()
    {
        return this._valorFormal_;
    }

    public void setValorFormal(List<?> list)
    {
        for(PValorFormal e : this._valorFormal_)
        {
            e.parent(null);
        }
        this._valorFormal_.clear();

        for(Object obj_e : list)
        {
            PValorFormal e = (PValorFormal) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._valorFormal_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._valorFormal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._valorFormal_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PValorFormal> i = this._valorFormal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PValorFormal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
