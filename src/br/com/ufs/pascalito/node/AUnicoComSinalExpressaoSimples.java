/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import java.util.*;
import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class AUnicoComSinalExpressaoSimples extends PExpressaoSimples
{
    private final LinkedList<TSinal> _sinal_ = new LinkedList<TSinal>();
    private PTermo _termo_;

    public AUnicoComSinalExpressaoSimples()
    {
        // Constructor
    }

    public AUnicoComSinalExpressaoSimples(
        @SuppressWarnings("hiding") List<?> _sinal_,
        @SuppressWarnings("hiding") PTermo _termo_)
    {
        // Constructor
        setSinal(_sinal_);

        setTermo(_termo_);

    }

    @Override
    public Object clone()
    {
        return new AUnicoComSinalExpressaoSimples(
            cloneList(this._sinal_),
            cloneNode(this._termo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnicoComSinalExpressaoSimples(this);
    }

    public LinkedList<TSinal> getSinal()
    {
        return this._sinal_;
    }

    public void setSinal(List<?> list)
    {
        for(TSinal e : this._sinal_)
        {
            e.parent(null);
        }
        this._sinal_.clear();

        for(Object obj_e : list)
        {
            TSinal e = (TSinal) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._sinal_.add(e);
        }
    }

    public PTermo getTermo()
    {
        return this._termo_;
    }

    public void setTermo(PTermo node)
    {
        if(this._termo_ != null)
        {
            this._termo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sinal_)
            + toString(this._termo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sinal_.remove(child))
        {
            return;
        }

        if(this._termo_ == child)
        {
            this._termo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TSinal> i = this._sinal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSinal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._termo_ == oldChild)
        {
            setTermo((PTermo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
