/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.pascalito.node;

import java.util.*;
import br.com.ufs.pascalito.analysis.*;

@SuppressWarnings("nls")
public final class ABloco extends PBloco
{
    private final LinkedList<PNumeroSemSinal> _numeroSemSinal_ = new LinkedList<PNumeroSemSinal>();
    private final LinkedList<PDefinicaoTipo> _definicaoTipo_ = new LinkedList<PDefinicaoTipo>();
    private final LinkedList<PDeclaracaoVariavel> _declaracaoVariavel_ = new LinkedList<PDeclaracaoVariavel>();
    private final LinkedList<PDeclaracaoProcOuFuncao> _declaracaoProcOuFuncao_ = new LinkedList<PDeclaracaoProcOuFuncao>();
    private PSentenca _sentenca_;

    public ABloco()
    {
        // Constructor
    }

    public ABloco(
        @SuppressWarnings("hiding") List<?> _numeroSemSinal_,
        @SuppressWarnings("hiding") List<?> _definicaoTipo_,
        @SuppressWarnings("hiding") List<?> _declaracaoVariavel_,
        @SuppressWarnings("hiding") List<?> _declaracaoProcOuFuncao_,
        @SuppressWarnings("hiding") PSentenca _sentenca_)
    {
        // Constructor
        setNumeroSemSinal(_numeroSemSinal_);

        setDefinicaoTipo(_definicaoTipo_);

        setDeclaracaoVariavel(_declaracaoVariavel_);

        setDeclaracaoProcOuFuncao(_declaracaoProcOuFuncao_);

        setSentenca(_sentenca_);

    }

    @Override
    public Object clone()
    {
        return new ABloco(
            cloneList(this._numeroSemSinal_),
            cloneList(this._definicaoTipo_),
            cloneList(this._declaracaoVariavel_),
            cloneList(this._declaracaoProcOuFuncao_),
            cloneNode(this._sentenca_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABloco(this);
    }

    public LinkedList<PNumeroSemSinal> getNumeroSemSinal()
    {
        return this._numeroSemSinal_;
    }

    public void setNumeroSemSinal(List<?> list)
    {
        for(PNumeroSemSinal e : this._numeroSemSinal_)
        {
            e.parent(null);
        }
        this._numeroSemSinal_.clear();

        for(Object obj_e : list)
        {
            PNumeroSemSinal e = (PNumeroSemSinal) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._numeroSemSinal_.add(e);
        }
    }

    public LinkedList<PDefinicaoTipo> getDefinicaoTipo()
    {
        return this._definicaoTipo_;
    }

    public void setDefinicaoTipo(List<?> list)
    {
        for(PDefinicaoTipo e : this._definicaoTipo_)
        {
            e.parent(null);
        }
        this._definicaoTipo_.clear();

        for(Object obj_e : list)
        {
            PDefinicaoTipo e = (PDefinicaoTipo) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._definicaoTipo_.add(e);
        }
    }

    public LinkedList<PDeclaracaoVariavel> getDeclaracaoVariavel()
    {
        return this._declaracaoVariavel_;
    }

    public void setDeclaracaoVariavel(List<?> list)
    {
        for(PDeclaracaoVariavel e : this._declaracaoVariavel_)
        {
            e.parent(null);
        }
        this._declaracaoVariavel_.clear();

        for(Object obj_e : list)
        {
            PDeclaracaoVariavel e = (PDeclaracaoVariavel) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaracaoVariavel_.add(e);
        }
    }

    public LinkedList<PDeclaracaoProcOuFuncao> getDeclaracaoProcOuFuncao()
    {
        return this._declaracaoProcOuFuncao_;
    }

    public void setDeclaracaoProcOuFuncao(List<?> list)
    {
        for(PDeclaracaoProcOuFuncao e : this._declaracaoProcOuFuncao_)
        {
            e.parent(null);
        }
        this._declaracaoProcOuFuncao_.clear();

        for(Object obj_e : list)
        {
            PDeclaracaoProcOuFuncao e = (PDeclaracaoProcOuFuncao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaracaoProcOuFuncao_.add(e);
        }
    }

    public PSentenca getSentenca()
    {
        return this._sentenca_;
    }

    public void setSentenca(PSentenca node)
    {
        if(this._sentenca_ != null)
        {
            this._sentenca_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sentenca_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numeroSemSinal_)
            + toString(this._definicaoTipo_)
            + toString(this._declaracaoVariavel_)
            + toString(this._declaracaoProcOuFuncao_)
            + toString(this._sentenca_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numeroSemSinal_.remove(child))
        {
            return;
        }

        if(this._definicaoTipo_.remove(child))
        {
            return;
        }

        if(this._declaracaoVariavel_.remove(child))
        {
            return;
        }

        if(this._declaracaoProcOuFuncao_.remove(child))
        {
            return;
        }

        if(this._sentenca_ == child)
        {
            this._sentenca_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PNumeroSemSinal> i = this._numeroSemSinal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNumeroSemSinal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDefinicaoTipo> i = this._definicaoTipo_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDefinicaoTipo) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDeclaracaoVariavel> i = this._declaracaoVariavel_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaracaoVariavel) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDeclaracaoProcOuFuncao> i = this._declaracaoProcOuFuncao_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaracaoProcOuFuncao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._sentenca_ == oldChild)
        {
            setSentenca((PSentenca) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
